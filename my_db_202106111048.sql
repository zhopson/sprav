--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.391.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 11.06.2021 10:48:25
-- Server version: 8.0.21
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE my_db;

--
-- Drop table `fr_code`
--
DROP TABLE IF EXISTS fr_code;

--
-- Drop table `lang`
--
DROP TABLE IF EXISTS lang;

--
-- Drop table `telegram`
--
DROP TABLE IF EXISTS telegram;

--
-- Drop table `type_task`
--
DROP TABLE IF EXISTS type_task;

--
-- Set default database
--
USE my_db;

--
-- Create table `type_task`
--
CREATE TABLE type_task (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(300) DEFAULT NULL,
  lang_id INT DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 33,
AVG_ROW_LENGTH = 606,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `telegram`
--
CREATE TABLE telegram (
  q VARCHAR(255) DEFAULT NULL,
  a VARCHAR(255) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `lang`
--
CREATE TABLE lang (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 1820,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `fr_code`
--
CREATE TABLE fr_code (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(150) DEFAULT NULL,
  code TEXT DEFAULT NULL,
  type_task_id INT DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 93,
AVG_ROW_LENGTH = 1542,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

-- 
-- Dumping data for table type_task
--
INSERT INTO type_task VALUES
(1, 'Отчеты', 4),
(2, 'Операции', 4),
(3, 'Zabbix', 4),
(4, 'Структуры', 1),
(5, 'Postgres', 1),
(6, 'Фрагменты кода', 1),
(7, 'Фрагменты кода', 2),
(8, 'Фрагменты кода', 3),
(9, 'Запросы', 4),
(10, 'Базы Данных', 2),
(11, 'Структуры данных', 6),
(14, 'Динамическая память', 6),
(15, 'Списки', 6),
(17, 'Массивы', 6),
(18, 'Описания переменных', 7),
(19, 'Telnet', 3),
(20, 'Базы Данных', 3),
(21, 'Работа с Файлами', 7),
(22, 'Работа с файлами', 2),
(23, 'Классы', 6),
(24, 'Работа с файлами', 3),
(26, 'Telnet', 2),
(27, 'Отчеты доступности устройств', 4),
(28, 'Работа с html Тегами', 8),
(29, 'Фрагменты кода', 9),
(30, 'Команды', 10),
(32, 'Обработка текста', 10);

-- 
-- Dumping data for table telegram
--
INSERT INTO telegram VALUES
('hi', 'Привет'),
('hello', 'Как невежливо!'),
('who are you', 'Я Бот'),
('what is your name', 'Нет имени'),
('время', 'команда: время');

-- 
-- Dumping data for table lang
--
INSERT INTO lang VALUES
(1, 'C sharp'),
(2, 'Perl'),
(3, 'Php'),
(4, 'Sql'),
(6, 'C'),
(7, 'Pascal'),
(8, 'javascript'),
(9, 'java'),
(10, 'Win CMD');

-- 
-- Dumping data for table fr_code
--
INSERT INTO fr_code VALUES
(1, 'Список Записей', 'public class MailRecord {\r\n   public String login;\r\n   public String lastDate;\r\n   public String U_Name;\r\n   public String U_MailBox;\r\n   public String U_Domain;\r\n   public String comment;\r\n   public String usr_group;\r\n\r\n  public MailRecord(String plogin, String plastDate, String pU_Name, String pU_MailBox, String pU_Domain, \r\r\nString pcomment, String pusr_group)\r\n\t\t{\r\n            login = plogin;\r\n            lastDate = plastDate;\r\n            U_Name = pU_Name;\r\n            U_MailBox = pU_MailBox;\r\n            U_Domain = pU_Domain;\r\n            comment = pcomment;\r\n            usr_group = pusr_group;\r\n        }\r\n\r\n};\r\n\r\n....\r\n\r\npublic partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        List<MailRecord> mailRecords = new List<MailRecord>();\r\n\r\n    }\r\n\r\n\r\n....\r\n    MailRecord mr = new MailRecord(item[0] as string,\r\n                                   strDate,\r\n                                   item[2] as string,\r\n                                   item[3] as string,\r\n                                   item[4] as string,\r\n                                   item[5] as string,\r\n                                   item[6] as string);\r\n                    mailRecords.Add(mr);\r\n....\r\n\r\nforeach (MailRecord item in mailRecords) {\r\n  str = item.login + "|" + item.lastDate + "|" + item.U_Name + "|" + item.U_MailBox + "|" + item.U_Domain;\r\n}\r\n', 4),
(2, 'select c перебором результата запроса', 'class_pgsql class_pgsql = new class_pgsql();            \r\nDataSet dataset = new DataSet();\r\nString SQL = String.Format("select * from watcher.smotr_whatsapp_groups order by id");\r\ndataset = class_pgsql.SelectSQL(SQL, "zabbix", Settings1.Default.DBServerIP, "6432");\r\nif (dataset.Tables[0].Rows.Count > 0) {\r\n               foreach (DataRow item in dataset.Tables[0].Rows)\r\n               checkedListBoxGroupsWhatsapp.Items.Add(item[0].ToString() + "  " + item[1].ToString());            \r\n}', 5),
(3, 'select в GataGridView', 'class_pgsql class_pgsql = new class_pgsql();\r\nDataSet dataset = new DataSet();\r\nDataSet dataset_tmp = new DataSet();\r\nSQL = String.Format("select a.* from port_info.dslam_dhcp_nets a where  a.ipaddr=''{0}''",ipadres);\r\ndataset_tmp.Clear();\r\ndataset_tmp = class_pgsql.SelectSQL(SQL, "zabbix", Settings1.Default.DBServerIP, "6432");\r\ndataset.Merge(dataset_tmp);\r\nif (dataset.Tables[0].Rows.Count > 0) { dgvSubNets.DataSource = dataset.Tables[0]; dgvSubNets.Tag = dataset; }\r\n//lbNumRows1.Text = dataset.Tables[0].Rows.Count.ToString();\r\ndgvSubNets.Columns[0].HeaderCell.Value = "ip адрес";\r\ndgvSubNets.Columns[1].HeaderCell.Value = "Сеть";\r\ndgvSubNets.Columns[2].HeaderCell.Value = "Филиал";\r\ndgvSubNets.Columns[3].HeaderCell.Value = "Адрес";\r\ndgvSubNets.Columns[4].HeaderCell.Value = "Модель";\r\ndgvSubNets.Columns[1].Width = 130;\r\ndgvSubNets.Columns[2].Width = 180;\r\ndgvSubNets.Columns[3].Width = 200;\r\ndgvSubNets.Columns[4].Width = 120;', 5),
(4, 'insert', '\r\nclass_pgsql class_pgsql = new class_pgsql();\r\nString SQL = String.Format(@"insert into watcher.smotr_gpon_telnet (olt_ip,slot,port,id_terminal,operation,user1)\r\nvalues (''{0}'',''{1}'',''{2}'',''{3}'',''{5}'',''{4}'')", ip, FrameSlot, PortOntID, tb_term_id_gpon.Text, username_ForRaports, operation);\r\nSuccess = class_pgsql.ExecuteSQL(SQL, "zabbix", Settings1.Default.DBServerIP, "6432");\r\nif (Success) MessageBox.Show("Данные отправлены", "Информация");\r\nelse MessageBox.Show("Данные не отправлены", "Ошибка БД");', 5),
(5, 'Инициализация', 'using Npgsql;\r\nusing System.Data;\r\n\r\nnamespace import_from_technograd\r\n{\r\n    class class_pgsql\r\n    {\r\n        /// <summary>connectionDB() - Возвращает connect к PostgreSQL.\r\n        /// <param name="string"> Имя базы данных </param></summary>\r\n        /// \r\n        public NpgsqlConnection connectionDB(string databaseName, string ip_server, string port)\r\n        {\r\n            NpgsqlConnection connectionDB = new NpgsqlConnection("Server=" + ip_server + ";Port=" + port + ";User Id=c_vpn;Password=vitesse; database=" + databaseName + ";CommandTimeout=150;");\r\n               \r\n            return connectionDB;\r\n        }\r\n\r\n        public bool IsConnectionDBPresent(string databaseName, string ip_server, string port)\r\n        {\r\n            NpgsqlConnection connection = connectionDB(databaseName, ip_server, port);\r\n            try\r\n            {\r\n                connection.Open();\r\n                return true;\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                //System.Windows.Forms.MessageBox.Show("Нет соединения с сервером БД " + e.ToString());\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /// <summary>SelectSQL() - Возвращает DataSet(готовые данные).\r\n        /// <param name="string"> SQl команда </param>\r\n        /// <param name="string"> Имя базы данных </param></summary>\r\n        public DataSet SelectSQL(string sqlCommand, string databaseName, string ip_server, string port)\r\n        {\r\n            NpgsqlConnection connection = connectionDB(databaseName, ip_server, port);\r\n            NpgsqlCommand cmd = new NpgsqlCommand();\r\n            NpgsqlDataAdapter adapter = new NpgsqlDataAdapter();\r\n            DataSet dataSet = new DataSet();\r\n\r\n            try\r\n            {\r\n                connection.Open();\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                System.Windows.Forms.MessageBox.Show("Нет соединения с сервером БД" + e.ToString());\r\n                return null;\r\n            }\r\n\r\n            try\r\n            {\r\n                cmd.Connection = connection;\r\n                cmd.CommandText = sqlCommand;\r\n                adapter.SelectCommand = cmd;\r\n                adapter.Fill(dataSet);\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                System.Windows.Forms.MessageBox.Show(e.Message);\r\n            }\r\n            \r\n             connection.Close();\r\n            connection.ClearPool();\r\n            dataSet.Dispose();\r\n            return dataSet;\r\n        }\r\n\r\n\r\n        /// <summary>ExecuteSQL() - Возвращает bool(true если INSERT в БД произведен).\r\n        /// <param name="string"> SQl команда </param>\r\n        /// <param name="string"> Имя базы данных </param></summary>\r\n        public bool ExecuteSQL(string sqlCommand, string databaseName, string ip_server, string port)\r\n        {\r\n            NpgsqlConnection connection = connectionDB(databaseName, ip_server, port);\r\n            NpgsqlCommand cmd = new NpgsqlCommand();\r\n            try\r\n            {\r\n                connection.Open();\r\n            }\r\n            catch\r\n            {\r\n                System.Windows.Forms.MessageBox.Show("Нет соединения с сервером");\r\n                return false;\r\n            }\r\n            cmd.Connection = connection;\r\n            cmd.CommandText = sqlCommand;\r\n            try\r\n            {\r\n                cmd.ExecuteNonQuery();\r\n            }\r\n            catch (NpgsqlException ex)\r\n            {\r\n                //System.Windows.Forms.MessageBox.Show(ex.ToString());\r\n                System.Windows.Forms.MessageBox.Show(ex.Message);\r\n                return false;\r\n            }\r\n            connection.Close();\r\n            connection.ClearPool();\r\n            return true;\r\n        }\r\n\r\n        /// <summary>ExecuteSQL() - Возвращает bool(true если INSERT в БД произведен).\r\n        /// <param name="string"> SQl команда </param>\r\n        /// <param name="string"> Имя базы данных </param></summary>\r\n        public bool ExecuteSQL(string sqlCommand, string databaseName, NpgsqlConnection _connection)\r\n        {\r\n            NpgsqlConnection connection = _connection;\r\n            NpgsqlCommand cmd = new NpgsqlCommand();\r\n            cmd.Connection = connection;\r\n            cmd.CommandText = sqlCommand;\r\n            try\r\n            {\r\n                cmd.ExecuteNonQuery();\r\n            }\r\n            catch (NpgsqlException ex)\r\n            {\r\n                System.Windows.Forms.MessageBox.Show(ex.ToString());\r\n                return false;\r\n            }\r\n            connection.Close();\r\n            connection.ClearPool();\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n', 5),
(6, 'Файлы текстовые', '//запись в файл\r\nStreamWriter sw = new StreamWriter("1.txt");\r\nsw.WriteLine(SQL);\r\nsw.Close();\r\n//////////////////////////\r\n\r\nString fileName = "report.import.mail.sakha.ru.txt";\r\nStreamWriter sw = new StreamWriter(fileName,false,System.Text.Encoding.GetEncoding(1251));\r\n\r\nString str = "Логин sakha.ru|Дата входа|Владелец ящика|Имя ящика|Домен|Комментарий|Группа";\r\nsw.WriteLine(str);\r\nsw.Close();\r\n\r\n//чтение\r\nString str;\r\nString textFile = "text.txt";\r\nStreamReader din = new StreamReader(textFile, System.Text.Encoding.GetEncoding(1251));\r\nwhile ((str = din.ReadLine()) != null) {\r\n //str\r\n}\r\ndin.Close();\r\n', 6),
(7, 'Регулярные выражения - совпадение в текстовом файле', 'Regex myReg = new Regex(@"(?<mac>\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w)(.*?)(?<adress>\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Singleline);\r\nStreamReader din = new StreamReader(textBoxFile.Text, System.Text.Encoding.GetEncoding(1251));\r\nString str;\r\nwhile ((str = din.ReadLine()) != null)\r\n{\r\nif (!myReg.IsMatch(str))\r\nMessageBox.Show("Не удалось получить таблицу значений. Проверьте шаблон регулярного выражения");\r\nMatch m = myReg.Match(str);\r\nString smac = m.Groups["mac"].Value;\r\nString sadr = m.Groups["adress"].Value;\r\n}\r\ndin.Close();', 6),
(8, 'Регулярные выражения - извлечение данных из html форм', '\tString^ html = content;\r\n\r\n\tRegex^ myReg = gcnew Regex("<table width=\\"100%\\" border=\\"0\\" id=\\"Unitable\\" cellspacing=\\"0\\" cellpadding=\\"0\\">(?<table_body>.*?)</table>", static_cast<RegexOptions>(RegexOptions::IgnoreCase | RegexOptions::Multiline | RegexOptions::Singleline));\r\n\tif (!myReg->IsMatch(html) || (html = myReg->Match(html)->Groups["table_body"]->Value) == "")\r\n\t{\r\n\t MessageBox::Show("Не удалось получить таблицу значений. Проверьте шаблон регулярного выражения.");\r\n\t return;\r\n\t}\r\n\r\n \tmyReg = gcnew Regex("<td class=\\" wrap\\"> (?<erms_num>.*?)</td>(.*?)<td class=\\" wrap\\"> (?<adress>.*?)</td>(.*?)<td class=\\" wrap\\"> (?<stru>.*?)</td>(.*?)<td class=\\" wrap\\">(.*?)(?<sttime>.*?)</td>(.*?)<td class=\\" wrap\\">(.*?)(?<entime>.*?)</td>(.*?)<td class=\\" wrap\\">(.*?)(?<duration>.*?)</td>(.*?)<td class=\\" wrap\\">(.*?)(?<descr>.*?)</td>(.*?)<td class=\\" wrap\\">(.*?)(?<clean_descr>.*?)</td>(.*?)<td class=\\" wrap\\">(.*?)(?<reason>.*?)</td>(.*?)<td>(?<dsl>.*?)</td>(.*?)<td>(?<iptv>.*?)</td>(.*?)<td>(?<ota>.*?)</td>(.*?)",\r\n\t\t\t\t\tstatic_cast<RegexOptions>(RegexOptions::IgnoreCase | RegexOptions::Multiline | RegexOptions::Singleline));\r\n//\tNameValueCollection qs = gcnew NameValueCollection();\r\n\tfor each (Match^ m in myReg->Matches(html))\r\n\t{\r\n\tString^ snum="";\r\n\tString^ sadr="";\r\n\tString^ struc="";\r\n\tString^ sstt="";\r\n\tString^ sent="";\r\n\tString^ sdur="";\r\n\tString^ sdesc="";\r\n\tString^ sclean="";\r\n\tString^ sreas="";\r\n\tString^ sdsl="";\r\n\tString^ siptv="";\r\n\tString^ sota="";\r\n\tint inum=0,idsl=0,iiptv=0,iota=0;\r\n\r\n\t\tsnum = m->Groups["erms_num"]->Value;\r\n\t\tsadr = m->Groups["adress"]->Value;\r\n\t\tstruc = m->Groups["stru"]->Value;\r\n\t\tsstt = m->Groups["sttime"]->Value;\r\n\t\tsent = m->Groups["entime"]->Value;\r\n\t\tsdur = m->Groups["duration"]->Value;\r\n\t\tsdesc = m->Groups["descr"]->Value;\r\n\t\tsclean = m->Groups["clean_descr"]->Value;\r\n\t\tsreas = m->Groups["reason"]->Value;\r\n\t\tsdsl = m->Groups["dsl"]->Value;\r\n\t\tsiptv = m->Groups["iptv"]->Value;\r\n\t\tsota = m->Groups["ota"]->Value;\r\n\r\n//\t\tRemovecRcN()\r\n\t\tString^ tmpstr;\r\n\t\ttmpstr=sdesc->Replace(''\\n'','' '');\r\n\t\tsdesc=tmpstr;\r\n\r\n\t\ttmpstr=sdesc->Replace(''\\r'','' '');\r\n\t\tsdesc=tmpstr;\r\n\r\n\r\n\t\ttmpstr=sclean->Replace(''\\n'','' '');\r\n\t\tsclean=tmpstr;\r\n\r\n\t\ttmpstr=sclean->Replace(''\\r'','' '');\r\n\t\tsclean=tmpstr;\r\n\r\n\r\n\t\ttmpstr=sreas->Replace(''\\n'','' '');\r\n\t\tsreas=tmpstr;\r\n\t\t\r\n\t\ttmpstr=sreas->Replace(''\\r'','' '');\r\n\t\tsreas=tmpstr;\r\n\r\n\t\t/*\t\tint i=0;\r\n\t\tfor each (char ch in sdesc) {\r\n\t\t\tif (ch==13||ch==10) \r\n\t\t\t\tsdesc[i]='' ''; \r\n\t\t\t\ti++;\r\n\t\t}*/\r\n\r\n\t\tDateTime ^eee;\r\n\t\tDateTime ^ddd = DateTime::Parse(sstt);\r\n\t\tif (sent[0]!=160) eee = DateTime::Parse(sent);\r\n\t\telse eee=nullptr;\r\n\r\n\t\tinum=Convert::ToInt32(snum);\r\n\r\n\t\tif (sdsl->Length>1||sdsl[0]!=160) {\r\n\t\t\tint found = sdsl->IndexOf("*");\r\n\t\t\tif (found!=-1) sdsl=sdsl->Substring(0,found);\r\n\t\t\tidsl=Convert::ToInt32(sdsl);\r\n\t\t}\r\n\t\tif (siptv->Length>1||siptv[0]!=160) {\r\n\t\t\tint found = siptv->IndexOf("*");\r\n\t\t\tif (found!=-1) siptv=siptv->Substring(0,found);\r\n\t\t\tiiptv=Convert::ToInt32(siptv);\r\n\t\t}\r\n\t\tif (sota->Length>1||sota[0]!=160) {\r\n\t\t\tint found = sota->IndexOf("*");\r\n\t\t\tif (found!=-1) sota=sota->Substring(0,found);\r\n\t\t\tiota=Convert::ToInt32(sota);\r\n\t\t}\r\n\t\tif (sdur[0]==160) sdur="";\r\n\t\trealdata.prepend(inum,sadr,struc,0,0,ddd,eee,sdur,sdesc,sclean,sreas,idsl,iiptv,iota);\r\n\t}\r\n', 6),
(10, 'Соединение', 'my $telnet=new Net::Telnet(Output_record_separator=>"");\r\n$telnet->open($host);\r\n$telnet->waitfor(''/UserName/'');\r\n$telnet->print("admin\\n");', 19),
(11, 'Астериск CDR', 'select calldate, src,dst, disposition,lastapp from cdr\r\nwhere /*src=14112408088 and */\r\n(TO_DAYS(NOW()) - TO_DAYS(DATE_FORMAT(calldate,''%Y-%m-%d %H:%i:%s''))) > 90\r\n\r\n\r\ndelete from cdr where (TO_DAYS(NOW()) - TO_DAYS(DATE_FORMAT(calldate,''%Y-%m-%d %H:%i:%s''))) > 90', 9),
(12, 'Создание таблицы запросом', 'postgres\r\n\r\nselect a.uzel,a.ipaddr,a.marka,''10.60.0.0/16'' into port_info.temp_table from port_info.import_technograd a inner join port_info.ntp_adsl_ip b on a.ipaddr=b.ip\r\nwhere ipaddr like ''10.60.0.1%'' order by ipaddr\r\n\r\n\r\nmysql\r\n\r\nCREATE TABLE table2 SELECT * FROM table1;\r\nCREATE TABLE temp_ipaddress select * from ipaddress where timestamp >= ''2016-07-11 12:15:00'' and timestamp <= ''2016-07-11 13:30:00''', 2),
(13, 'Вставка таблицы запросом', 'insert into "watcher"."comments_raport_optinet" (fio,date,comments,optinet_id)\r\n  select a.fio, a.date, a.reason, a.id\r\n\tfrom "watcher"."raport_optinet" a\r\n  where a.reason is not NULL; \r\n\r\ninsert into port_info.mac_table_tmp\r\nSELECT ip, port, mac, max(timestamp_operation)\r\n  FROM port_info.mac_table\r\ngroup by ip, port, mac', 2),
(14, 'dhcp dslam binds ntp', 'select a.ipaddr,b.host_name,a.uzel,a.nom_oborud,a.marka,'''' as exist_net,'''' as new_net,\r\ncase when (v.chantype = ''???'') then ''RRL''\r\n     when v.chantype is null then ''VOLS''\r\n     else v.chantype\r\nend as type_connect,\r\n'''' as model_sw \r\nfrom port_info.import_technograd a \r\nLEFT OUTER JOIN dslam_hostnames_ltc_view_last_date b on b.host = a.ipaddr\r\nLEFT OUTER JOIN ntp_adsl_ip v on v.ip = a.ipaddr\r\nwhere (ipaddr like ''10.6%'' or ipaddr like ''172.28.%'') --and v.chantype is null\r\norder by a.uzel,a.ipaddr\r\n\r\n\r\nselect a.ipaddr,b.host_name,a.uzel,a.nom_oborud,a.marka,'''' as exist_net,'''' as new_net, v.chantype as type_connect,'''' as model_sw \r\nfrom port_info.import_technograd a \r\nLEFT OUTER JOIN dslam_hostnames_ltc_view_last_date b on b.host = a.ipaddr\r\nLEFT OUTER JOIN ntp_adsl_ip v on v.ip = a.ipaddr\r\nwhere (ipaddr like ''10.6%'' or ipaddr like ''172.28.%'')\r\norder by a.uzel,a.ipaddr\r\n\r\n-- с сетками биндов\r\n\r\nselect a.ipaddr,b.host_name,a.uzel,a.nom_oborud,a.marka,f.bind_net as exist_net,'''' as new_net, v.chantype as type_connect,'''' as model_sw \r\nfrom port_info.import_technograd a \r\nLEFT OUTER JOIN dslam_hostnames_ltc_view_last_date b on b.host = a.ipaddr\r\nLEFT OUTER JOIN ntp_adsl_ip v on v.ip = a.ipaddr\r\nLEFT OUTER JOIN dslam_binds_ltc f on f.host = a.ipaddr\r\nwhere a.vid_oborud = ''DSLAM'' and ipaddr not like ''172.16.6%'' and ipaddr not like ''172.16.9%''--(ipaddr like ''10.6%'' or ipaddr like ''172.28.%'')\r\norder by a.uzel,a.ipaddrTO_DAYS(DATE_FORMAT(calldate,''%Y-%m-%d %H:%i:%s''))) > 90', 9),
(15, 'port_info_dslam get binds nets', 'select a.host, \r\n      replace(replace(replace(replace((a.net)::text, ''{''::text, ''''::text), ''}''::text, ''''::text), ''"''::text, ''''::text), '',''::text, '', ''::text)\r\nfrom (\r\n SELECT DISTINCT \r\n\t\tsmotr_dslam_ports.host,\r\n    array_agg( distinct substring(smotr_dslam_ports.ip_line from ''\\d+\\.\\d+\\.\\d+'')||''.0'') as net\r\n\t\t--max(smotr_dslam_ports.date) \r\n   FROM smotr_dslam_ports\r\n  WHERE host not like ''172.16.6%'' and host not like ''172.16.9%'' and substring(smotr_dslam_ports.ip_line from ''\\d+\\.\\d+\\.\\d+'')!=''Null''\r\n  group by smotr_dslam_ports.host --substring(smotr_dslam_ports.ip_line from ''\\d+\\.\\d+\\.\\d+'')||''.0''\r\n  ORDER BY smotr_dslam_ports.host\r\n) a', 9),
(16, 'port_info_dslam dup binds', '/*select distinct odin.host_name, odin.host, odin.port, odin.port_status, odin.ip_line, odin.profile_line, odin.vlan_line--, dva.host, dva.port, dva.ip_line        \r\n  FROM (select * from device_auth.dslam_ports where host=''172.16.6.207'' and date between ''2014-05-14 00:00:00'' and ''2014-05-14 23:59:59'') odin, \r\n       (select * from device_auth.dslam_ports where host=''172.16.6.207'' and date between ''2014-05-14 00:00:00'' and ''2014-05-14 23:59:59'') dva \r\nwhere  odin.port!=dva.port and \r\n       odin.ip_line=dva.ip_line\r\n       and odin.ip_line!=''1.1.1.1'' and odin.ip_line!=''NA'' and odin.ip_line!=''''\r\n       --and odin.ip_line=''1.1.1.1''\r\n       order by odin.port;*/\r\n/*\r\nselect distinct first.host_name, first.host, first.port, first.port_status, first.ip_line\r\nfrom device_auth.dslam_ports first, device_auth.dslam_ports second\r\nwhere first.port!=second.port and first.ip_line=second.ip_line and first.host=second.host\r\n  and first.ip_line!=''1.1.1.1'' and first.ip_line!=''NA'' and first.ip_line!=''''\r\n  and first.date between ''2014-05-14 00:00:00'' and ''2014-05-14 23:59:59''\r\n  and first.host=''172.16.6.230''\r\n  and first.host in (select ip_line from device_auth.dslam_ports group by ip_line having count(ip_line)>1)\r\norder by first.port;\r\n*/\r\n\r\n/*select host_name, host, port, port_status, ip_line from device_auth.dslam_ports\r\nwhere ip_line in (select ip_line from device_auth.dslam_ports where host=''172.16.6.230'' \r\nand date between ''2014-05-16 00:00:00'' and ''2014-05-16 23:59:59'' and ip_line like ''%172.16.%'' group by ip_line having count(ip_line)>1)\r\nand date between ''2014-05-16 00:00:00'' and ''2014-05-16 23:59:59'' and host=''172.16.6.230'' \r\nand ip_line!=''NA'' and ip_line!='''' and ip_line!=''1.1.1.1''*/\r\n\r\nselect host_name, host, port, port_status, ip_line from device_auth.dslam_ports\r\nwhere ip_line in (select ip_line from device_auth.dslam_ports where host=''172.16.6.230'' \r\nand date between ''2014-05-16 00:00:00'' and ''2014-05-16 23:59:59'' group by ip_line having count(ip_line)>1)\r\nand date between ''2014-05-16 00:00:00'' and ''2014-05-16 23:59:59'' and host=''172.16.6.230'' \r\nand ip_line!=''1.1.1.1'' and ip_line!=''NA'' and ip_line!=''''\r\n\r\n       ', 9),
(17, 'port_info_dslam ports stat', '/*SELECT  \r\n        (select count (*) from device_auth.dslam_ports \r\n        where date between ''2014-05-12 00:00:00'' and ''2014-05-12 23:59:59'' and host=''10.60.13.3''\r\n        ) as ports_total,\r\n        (select count (*) from device_auth.dslam_ports \r\n        where date between ''2014-05-12 00:00:00'' and ''2014-05-12 23:59:59'' and host=''10.60.13.3'' and port_status=''Activated''\r\n        ) as ports_Activated,\r\n\t(select count (*) from device_auth.dslam_ports \r\n        where date between ''2014-05-12 00:00:00'' and ''2014-05-12 23:59:59'' and host=''10.60.13.3'' and port_status=''Activating''\r\n        ) as ports_Activating,\r\n\t(select count (*) from device_auth.dslam_ports \r\n        where date between ''2014-05-12 00:00:00'' and ''2014-05-12 23:59:59'' and host=''10.60.13.3'' and port_status=''Deactivated''\r\n        ) as ports_DeActivated,\r\n        (select count (*) from device_auth.dslam_ports \r\n        where date between ''2014-05-12 00:00:00'' and ''2014-05-12 23:59:59'' and host=''10.60.13.3'' and ip_line=''NA''\r\n        ) as ports_without_binds\r\n*/\r\nselect \r\n       sum(Activating) as ports_activating,\r\n       sum(Activated) as ports_activated,\r\n       sum(Deactivated) as ports_deactivated,\r\n       sum(Activating)+sum(Deactivated)+sum(Activated) as ports_total,\r\n       sum(ipline) as ports_without_binds \r\nfrom (\r\n\tselect \r\n\t\tcase when port_status=''Activating'' then count else 0 end as Activating,\r\n\t\tcase when port_status=''Deactivated'' then count else 0 end as Deactivated,\r\n\t\tcase when port_status=''Activated'' then count else 0 end as Activated,\r\n\t\tcase when ip_line=''NA'' then c_ip_line else 0 end as ipline\r\n\tfrom (\r\n\t\tSELECT distinct count(port_status), port_status,count(ip_line) c_ip_line,ip_line\r\n\t\tfrom device_auth.dslam_ports f \r\n\t\twhere (f.host=''172.16.9.4'') \r\n\t\t\tand f.date between ''2014-05-13 00:00:00'' and ''2014-05-13 23:59:59''\r\n\t\tgroup by port_status, ip_line\t\t\r\n\t) a\r\n) b\r\n--group by name, host\r\n--final\r\n\r\nselect name,\r\n       host,\r\n       sum(Activating) as Activating,\r\n       sum(Activated) as Activated,\r\n       sum(Deactivated) as Deactivated,\r\n       sum(Activating)+sum(Deactivated)+sum(Activated) as total,\r\n       sum(ipline) binds_na \r\nfrom (\r\n\tselect name,host,\r\n\t\tcase when port_status=''Activating'' then count else 0 end as Activating,\r\n\t\tcase when port_status=''Deactivated'' then count else 0 end as Deactivated,\r\n\t\tcase when port_status=''Activated'' then count else 0 end as Activated,\r\n\t\tcase when ip_line=''NA'' then c_ip_line else 0 end as ipline\r\n\tfrom (\r\n\t\tSELECT  distinct hosts.name as name, f.host, count(port_status), port_status,count(ip_line) c_ip_line,ip_line\r\n\t\tfrom public.hosts, device_auth.dslam_ports f \r\n\t\twhere (f.host=hosts.host) \r\n\t\t--\tand (hosts.name not like ''%Якутск%'') \r\n\t\t\tand f.date between ''2014-05-13 00:00:00'' and ''2014-05-13 23:59:59''\r\n\t\tgroup by hosts.name, f.host, port_status, ip_line\t\t\r\n\t) a\r\n) b\r\ngroup by name, host\r\norder by host', 9),
(18, 'dslam_nets dup', 'select substring(array_agg(f.ipaddr)::text from 2 for char_length(array_agg(f.ipaddr)::text)-2),\r\narray_agg(f.marka), f.net, count(f.net) from\r\n(select a.ipaddr, a.net, b.marka from dslam_nets a inner join import_technograd b on b.ipaddr = a.ipaddr) f\r\ngroup by net\r\nhaving count(net)>1', 9),
(19, 'import2zabbix sp', 'DECLARE vhostid, vintid, vitemid, vtriggerid, vfunctionid, vhostgroupid, vhosttemplateid  BIGINT;\r\n\r\nSELECT nextid+1 INTO vhostid FROM zabbix.ids where table_name=''hosts'' LIMIT 1;\r\nSELECT nextid+1 INTO vintid FROM zabbix.ids where table_name=''interface'' LIMIT 1;\r\nSELECT nextid+1 INTO vitemid FROM zabbix.ids where table_name=''items'' LIMIT 1;\r\nSELECT nextid+1 INTO vtriggerid FROM zabbix.ids where table_name=''triggers'' LIMIT 1;\r\nSELECT nextid+1 INTO vfunctionid FROM zabbix.ids where table_name=''functions'' LIMIT 1;\r\nSELECT nextid+1 INTO vhostgroupid FROM zabbix.ids where table_name=''hosts_groups'' LIMIT 1;\r\nSELECT nextid+1 INTO vhosttemplateid FROM zabbix.ids where table_name=''hosts_templates'' LIMIT 1;\r\n\r\n\r\n--proxy zabbix_proxy2, proxy_hostid=17402  \r\ninsert into zabbix.hosts (hostid,host,name,proxy_hostid) values (vhostid,ip,name,17402);\r\n\r\ninsert into zabbix.interface (interfaceid,hostid,main,type,ip,port) values (vintid ,vhostid ,1,2,IP,''161'');\r\n\r\n--name,key_,templateid\r\ninsert into zabbix.items (itemid,type,hostid,name,key_,delay,history,value_type,formula,templateid,interfaceid)\r\n      values (vitemid,10,vhostid,''Запрос информации о портах'',''ports_info_dlink.sh[{HOST.CONN}]'',86400,1,3,1,573941,vintid);\r\ninsert into zabbix.functions (functionid,itemid,triggerid,function) values (vfunctionid,vitemid,vtriggerid,''last'');\r\n--description,templateid\r\ninsert into zabbix.triggers (triggerid,expression,description,priority,templateid) \r\n\t\t\t\t values (vtriggerid,CONCAT(''{'',vfunctionid,''}<>1''),''Ошибка запроса информации о портах Dlink'',2,131460);\r\n--groupid=117 - Оборудование - ШПД Якутск Switches\r\ninsert into zabbix.hosts_groups (hostgroupid,hostid,groupid) values (vhostgroupid,vhostid,Grup); \r\n--templateid\r\ninsert into zabbix.hosts_templates (hosttemplateid,hostid,templateid) values (vhosttemplateid,vhostid,15606);\r\ninsert into zabbix.host_inventory (hostid,inventory_mode,type,alias,tag,location,model,site_address_a,site_city) \r\n\t\t\t\t\t  values (vhostid,1,''SW'',''location + model'',type_net,num_oborud,marka,location,''Якутск'');\r\n\r\nupdate zabbix.ids set nextid=vhostid where table_name=''hosts'';\r\nupdate zabbix.ids set nextid=vintid where table_name=''interface'';\r\nupdate zabbix.ids set nextid=vitemid where table_name=''items'';\r\nupdate zabbix.ids set nextid=vtriggerid where table_name=''triggers'';\r\nupdate zabbix.ids set nextid=vfunctionid where table_name=''functions'';\r\nupdate zabbix.ids set nextid=vhostgroupid where table_name=''hosts_groups'';\r\nupdate zabbix.ids set nextid=vhosttemplateid where table_name=''hosts_templates'';\r\n\r\n------------------------------------------------------------------------------------------------\r\n\r\nCREATE OR REPLACE FUNCTION "port_info"."send_question_info_port"(in ip_host varchar, in name_host varchar, in  gr_id BIGINT)\r\nRETURNS int as \r\n$BODY$\r\n\r\nDECLARE\r\nvhostid BIGINT; vintid BIGINT; vitemid BIGINT; vtriggerid BIGINT; vfunctionid BIGINT; vhostgroupid BIGINT;  vhosttemplateid  BIGINT;\r\n\r\nBEGIN\r\n\r\nSELECT nextid+1 INTO vhostid FROM public.ids where table_name=''hosts'' LIMIT 1;\r\nSELECT nextid+1 INTO vintid FROM public.ids where table_name=''interface'' LIMIT 1;\r\nSELECT nextid+1 INTO vitemid FROM public.ids where table_name=''items'' LIMIT 1;\r\nSELECT nextid+1 INTO vtriggerid FROM public.ids where table_name=''triggers'' LIMIT 1;\r\nSELECT nextid+1 INTO vfunctionid FROM public.ids where table_name=''functions'' LIMIT 1;\r\nSELECT nextid+1 INTO vhostgroupid FROM public.ids where table_name=''hosts_groups'' LIMIT 1;\r\nSELECT nextid+1 INTO vhosttemplateid FROM public.ids where table_name=''hosts_templates'' LIMIT 1;\r\n\r\n\r\n--proxy public_proxy2, proxy_hostid=17402  \r\ninsert into public.hosts (hostid,host,name,proxy_hostid) values (vhostid,ip_host,name_host,17402);\r\n\r\ninsert into public.interface (interfaceid,hostid,main,type,ip,port) values  (vintid,vhostid,1,2,ip_host,''161'');\r\n\r\n--name,key_,templateid\r\ninsert into public.items  (itemid,type,hostid,name,key_,delay,history,value_type,formula,templateid,interfaceid)\r\n      values (vitemid,10,vhostid,''Запрос информации о портах'',''ports_info_dlink.sh [{HOST.CONN}]'',86400,1,3,1,573941,vintid);\r\n\r\n--description,templateid\r\ninsert into public.triggers (triggerid,expression,description,priority,templateid) \r\n\t\t\t\t values (vtriggerid,''{''||vfunctionid||''}<>1'',''Ошибка запроса информации о  портах Dlink'',2,131460);\r\n\r\ninsert into public.functions (functionid,itemid,triggerid,function) values  (vfunctionid,vitemid,vtriggerid,''last'');\r\n\r\n--groupid=117 - Оборудование - ШПД Якутск Switches\r\ninsert into public.hosts_groups (hostgroupid,hostid,groupid) values (vhostgroupid,vhostid,gr_id); \r\n\r\n--templateid\r\ninsert into public.hosts_templates (hosttemplateid,hostid,templateid) values (vhosttemplateid,vhostid,15606);\r\n\r\n--alias = location + model; tag = type_net; location = num_oborud; model = marka; site_address_a = location\r\ninsert into public.host_inventory  (hostid,inventory_mode,type,alias,tag,location,model,site_address_a,site_city) \r\n\t\t\t\t\t  values (vhostid,1,''SW'',''Гаражная 1 dlink тест'',''Кварт- Тест'',''Гаражная 1'',''dlink тест'',''Гаражная 1'',''Якутск'');\r\n\r\nupdate public.ids set nextid=vhostid where table_name=''hosts'';\r\nupdate public.ids set nextid=vintid where table_name=''interface'';\r\nupdate public.ids set nextid=vitemid where table_name=''items'';\r\nupdate public.ids set nextid=vtriggerid where table_name=''triggers'';\r\nupdate public.ids set nextid=vfunctionid where table_name=''functions'';\r\nupdate public.ids set nextid=vhostgroupid where table_name=''hosts_groups'';\r\nupdate public.ids set nextid=vhosttemplateid where table_name=''hosts_templates'';\r\n\r\nreturn 0;\r\nEND\r\n', 3),
(20, 'all hosts info', 'select distinct hosts.hostid, hosts.name, interface.ip, \r\n       items.name as "name item", items.itemid as "itemid item", items.type as "type item", items.key_ as "key item", \r\n       triggers.triggerid, triggers.description as "descr trigger", triggers.expression as "expr trigger",\r\n       functions.functionid, functions.function, functions.parameter,\r\n       CONCAT(functions.function,''('',functions.parameter,'')='')\r\n  from hosts\r\n  left outer join interface on (hosts.hostid=interface.hostid)\r\n  left outer join items on (hosts.hostid=items.hostid)\r\n  left outer join functions on (functions.itemid=items.itemid)\r\n  left outer join triggers on (triggers.triggerid=functions.triggerid)\r\n  where (interface.ip<>'''') and (interface.ip<>''0.0.0.0'') and (interface.ip<>''127.0.0.1'') and (interface.port<>''127.0.0.1'')\r\n  order by ip\r\n\r\n\r\n\r\nselect a.alias,a.name,a.surname,b.name as group_name from users a\r\ninner join users_groups f on a.userid=f.userid\r\ninner join usrgrp b on f.usrgrpid=b.usrgrpid\r\nwhere alias like ''okorokovni%''', 3),
(21, 'all hosts info dslams', 'select distinct hosts.hostid, hosts.name, hosts.status as "disabled=1", interface.ip \r\n  from hosts\r\n  left outer join interface on (hosts.hostid=interface.hostid)\r\n  where (interface.ip<>'''') and (interface.ip<>''0.0.0.0'') and (interface.ip<>''127.0.0.1'') and (interface.port<>''127.0.0.1'')\r\n    and ((hosts.name like ''%Zy%'') or (hosts.name like ''%NATEKS%'') or (hosts.name like ''%MA56%''))\r\n    and (hosts.name not like ''%Якутск%'')\r\n  order by ip', 3),
(22, 'find host by adres', 'select hosts."host", hosts.name, hosts.status as "disabled=1"\r\n--from hosts where hosts.name like ''%КИРОВА% 7%/4%''\r\n--from hosts where hosts.name like ''%ДЗЕРЖИНСКОГО, 7%''\r\n--from hosts where hosts.name similar to ''%ДЗЕРЖИНСКОГО,*\\s*8(\\s|,)%''\r\nfrom hosts where hosts.name similar to ''%КИРОВА,*\\s*7%/4(\\s|,)%''\r\n\r\n\r\nselect b.name as adres,a.host_name,a.host,a.port_id,a.port,a.port_status,a.ip_line,a.profile_line,a.profile_iptv,a.vlan_line,a.pvc_line,a.vlan_iptv,a.pvc_iptv,a.mac,a.edsnr,a.eda,a.eusnr,a.eua,a.date \r\nfrom public.c_vpn_view_smotr_dslam_ports a\r\nLEFT OUTER JOIN hosts b on b."host" = a.host\r\nwhere a.date>=''2014-10-13 00:00:00'' and a.date<=''2014-10-13 23:59:59'' order by b.name\r\n--and b.name similar to ''%КИРОВА,*\\s*7%/4(\\s|,)%''', 3),
(23, 'Обновление dslam ports', 'update port_info.dslam_ports aaa set host_id = b.hostid\r\nfrom port_info.hosts b\r\nwhere aaa."host" = b."host"\r\n\r\n\r\nupdate public.smotr_dslam_ports set eua=substring(eua, 1, position(''.'' in eua))||substring(eua, position(''.'' in eua)+1, 1) \r\nwhere eua not like ''%Link down%''\r\nand eua SIMILAR TO ''%\\d+[A-Za-z]%''\r\n\r\n\r\n\r\nupdate port_info.dslam_ports \r\nset edsnr=substring(edsnr, 2 ) where edsnr like ''-%'';\r\nupdate port_info.dslam_ports \r\nset eusnr=substring(eusnr, 2 ) where eusnr like ''-%'';\r\nupdate port_info.dslam_ports \r\nset eda=substring(eda, 2 ) where eda like ''-%'';\r\nupdate port_info.dslam_ports \r\nset eua=substring(eua, 2 ) where eua like ''-%'';', 2),
(24, 'port_info_dslam ports', 'select substring(edsnr, 2 ) from port_info.dslam_ports where edsnr like ''-%''\r\n\r\nselect * from public.smotr_dslam_ports where \r\nedsnr SIMILAR TO ''%\\d+[A-Za-z]%'' or eda SIMILAR TO ''%\\d+[A-Za-z]%'' or eusnr SIMILAR TO ''%\\d+[A-Za-z]%'' or eua SIMILAR TO ''%\\d+[A-Za-z]%''\r\norder by host\r\n--limit 100;', 9),
(25, 'tech update iptv ports', 'update port_info.import_technograd aa set iptv_ports = b.iptv\r\nfrom iptv_ports b\r\nwhere aa.ipaddr = b.ip', 9),
(26, 'to_char watcher.raport_smena', 'select fio,to_char(date,''DD-MM-YYYY''),napravlenie,to_char(time_start, ''HH24:MI'') as time_start,to_char(time_end, ''HH24:MI'')as time_end,to_char(duration, ''HH24:MI'')as duration,reason from watcher.raport_smena', 2),
(27, 'array_agg replace watcher.raport_smena', ' SELECT a.id,\r\n    a.date_rec,\r\n    a.fio,\r\n    a.napravlenie,\r\n    a.time_start,\r\n    a.time_end,\r\n    a.duration,\r\n    replace(replace(replace(replace((a.com)::text, ''{''::text, ''''::text), ''}''::text, ''''::text), ''"''::text, ''''::text), '',''::text, chr(13)) AS comments\r\n   FROM ( SELECT a_1.id,\r\n            to_char(a_1.date, ''DD-MM-YYYY HH24:MI''::text) AS date_rec,\r\n            a_1.fio,\r\n            a_1.napravlenie,\r\n            to_char(a_1.time_start, ''DD-MM-YYYY HH24:MI''::text) AS time_start,\r\n            to_char(a_1.time_end, ''DD-MM-YYYY HH24:MI''::text) AS time_end,\r\n            a_1.duration,\r\n            array_agg((((((b.fio)::text || ''/''::text) || to_char(b.date, ''DD-MM-YYYY HH24:MI''::text)) || chr(13)) || (b.comments)::text)) AS com\r\n           FROM (watcher.raport_smena a_1\r\n      LEFT JOIN watcher.comments_raport_smena b ON ((b.smena_id = a_1.id)))\r\n     GROUP BY a_1.id, a_1.date, a_1.fio, a_1.napravlenie, a_1.time_start, a_1.time_end, a_1.duration) a\r\n  ORDER BY to_date(a.date_rec, ''DD-MM-YYYY HH24:MI''::text) DESC;', 2),
(28, 'tech alarms', 'SELECT ipaddr,marka,nom_oborud,date_alarm, cast(now()-date_alarm as interval) as duration from port_info.import_technograd where is_alarm = true\r\n\r\n\r\nselect count(*),sum(num_ports),sum(inet_ports),sum(iptv_ports)\r\nfrom import_technograd\r\nwhere is_alarm = true\r\n\r\n\r\nupdate port_info.import_technograd set date_alarm=null,is_alarm=false where ipaddr=''$host''\r\n\r\n\r\ndelete from port_info.comments_import_technograd where tech_id=(select id from port_info.import_technograd where ipaddr=''$host'')\r\n\r\n\r\nupdate port_info.comments_import_technograd_archive set date_end_alarm=now() where id in\r\n                    (select id from port_info.comments_import_technograd_archive where tech_id=\r\n                    (select id from port_info.import_technograd where ipaddr=''$host'') ) \r\n                    and (date_end_alarm is null)\r\n\r\n\r\n\r\nselect uzel,nom_oborud||''; ''||marka||''; (''||inet_ports||''/''||iptv_ports||'')'' from port_info.import_technograd where ipaddr = ''$host''', 9),
(29, 'stp stat', 'select usluga,count (distinct num_zayav),num_ustr,date_trunc(''day'',closed_date) from stp_stat\r\nwhere usluga not in (''Любая'',''Телефония'',''ЕЛК'',''мг/мн связь'',''Расчет'')\r\ngroup by num_ustr, date_trunc(''day'',closed_date),usluga\r\norder by count (distinct num_zayav) desc\r\n\r\n\r\n--select distinct usluga from stp_stat\r\n\r\nselect * from (\r\n(select cbr_group,avg(time_obr),min(time_obr),max(time_obr),''день'' as period from stp_stat \r\nwhere (date_part(''hour'', closed_date) between 9 and 17) and (closed_date-start_date< interval ''24 hours'')\r\ngroup by cbr_group\r\norder by avg(time_obr) desc)\r\nunion\r\n(select cbr_group,avg(time_obr),min(time_obr),max(time_obr),''ночь'' as period from stp_stat \r\nwhere (date_part(''hour'', start_date) between 0 and 9 or date_part(''hour'', start_date) between 17 and 23) and (closed_date-start_date< interval ''24 hours'')\r\ngroup by cbr_group\r\norder by avg(time_obr) desc) ) a\r\norder by a.avg desc\r\n\r\n\r\n\r\nselect usluga,count (distinct num_zayav),num_ustr from stp_stat\r\nwhere usluga not in (''Любая'',''Телефония'',''ЕЛК'',''мг/мн связь'',''Расчет'') and closed_date between ''2015-09-24 00:00'' and ''2015-09-29 23:59:59''\r\ngroup by usluga,num_ustr\r\norder by count (distinct num_zayav) desc\r\n\r\n\r\n\r\n#1\r\nselect a.num_ustr,h.uzel,h.nom_oborud,h.hostname,h.ipaddr,h.num_ports,h.inet_ports,a.usluga, count (distinct a.num_zayav) as count_obr,\r\ncase when h.inet_ports!=0 then cast ((count (distinct a.num_zayav)::float / h.inet_ports::float) as decimal(4,2))\r\nelse 0 end as koefficient\r\nfrom port_info.stp_stat a\r\nleft join port_info.stp_stat_ip b on b.num_ustr = a.num_ustr\r\nleft outer join port_info.import_technograd h on h.ipaddr = b.ipaddr\r\nwhere a.usluga not in (''Телефония'',''ЕЛК'',''мг/мн связь'',''Расчет'') --and a.closed_date between ''2015-09-24 00:00'' and ''2015-09-29 23:59:59''\r\ngroup by h.uzel,h.nom_oborud, a.usluga,a.num_ustr,h.hostname,h.ipaddr,h.num_ports,h.inet_ports\r\norder by count (distinct a.num_zayav) desc-- limit 50\r\n\r\n#окончательный вариант\r\nselect distinct h.uzel,h.nom_oborud,h.hostname,h.ipaddr,h.num_ports,h.inet_ports,count (distinct a.num_zayav) as count_obr,\r\ncase when h.inet_ports!=0 then cast ((count (distinct a.num_zayav)::float / h.inet_ports::float) as decimal(4,2))\r\nelse 0 end as koefficient\r\nfrom port_info.stp_stat a\r\ninner join port_info.stp_stat_ip b on b.num_ustr = a.num_ustr\r\ninner join port_info.import_technograd h on h.ipaddr = b.ipaddr\r\nwhere a.usluga not in (''Телефония'',''ЕЛК'',''мг/мн связь'',''Расчет'') --and a.closed_date between ''2015-09-24 00:00'' and ''2015-09-29 23:59:59''\r\ngroup by h.uzel,h.nom_oborud, h.hostname,h.ipaddr,h.num_ports,h.inet_ports\r\norder by count (distinct a.num_zayav) desc-- limit 50\r\n', 9),
(30, 'port_info_dslam errors report', '   select a.*,h.name address from (\r\n      SELECT host_name,host,port,port_status,profile_line,profile_iptv,vlan_line,pvc_line,vlan_iptv,pvc_iptv,edsnr,eusnr,eda,eua,date \r\n\t\t\tFROM public.smotr_dslam_ports--c_vpn_view_smotr_dslam_ports\r\n        where length(edsnr)>0 and length(eda)>0 and length(eusnr)>0 and length(eua)>0 \r\n\t\t\t\tand (host like ''172.16.6.%'' or host like ''172.16.9.%'') and edsnr <> ''Link down''\r\n    ) a\r\n    left join public.hosts h on h.host=a.host\r\n\t\tinner join public.last_date_smotr_dslam_ports_view b on b.host=a.host\r\n    where (cast(edsnr as numeric)<=6 or cast(eusnr as numeric)<=6 or cast(eda as numeric)>=60 or cast(eua as numeric)>=60)\r\n\t\t--and a.date = (select date from last_date_smotr_dslam_ports_view where host = a.host)\r\n\t\tand a.date=b.max_date\r\n\t\torder by host,port ASC', 9),
(31, 'Удаление избыточных данных dslam_ports по дате', 'delete from "port_info".dslam_ports where host in \r\n(''10.60.39.54'',\r\n''10.60.19.53'',\r\n''10.60.19.2'',\r\n''172.16.14.233'',\r\n''10.60.29.22'',\r\n''10.60.29.15'',\r\n''172.16.11.188'',\r\n''10.60.17.16'',\r\n''10.60.17.18'',\r\n''10.60.18.22'',\r\n''10.60.19.23'',\r\n''172.16.14.197'',\r\n''172.16.11.86'',\r\n''10.60.24.13'',\r\n''10.60.18.23'',\r\n''10.60.19.22'',\r\n''10.60.26.15'',\r\n''10.60.18.13'',\r\n''172.16.14.199'',\r\n''10.60.18.24'',\r\n''10.60.24.14'',\r\n''10.60.17.17'',\r\n''10.60.18.14'',\r\n''10.60.27.11'',\r\n''10.60.23.16'',\r\n''10.60.23.17'',\r\n''10.60.19.13'',\r\n''10.60.19.20'',\r\n''10.60.17.11'',\r\n''10.60.39.44'',\r\n''10.60.19.24''\r\n)\r\nand date > \r\n(select min(date)+interval ''2 minute'' from "port_info".dslam_ports \r\nwhere host in \r\n(''10.60.39.54'',\r\n''10.60.19.53'',\r\n''10.60.19.2'',\r\n''172.16.14.233'',\r\n''10.60.29.22'',\r\n''10.60.29.15'',\r\n''172.16.11.188'',\r\n''10.60.17.16'',\r\n''10.60.17.18'',\r\n''10.60.18.22'',\r\n''10.60.19.23'',\r\n''172.16.14.197'',\r\n''172.16.11.86'',\r\n''10.60.24.13'',\r\n''10.60.18.23'',\r\n''10.60.19.22'',\r\n''10.60.26.15'',\r\n''10.60.18.13'',\r\n''172.16.14.199'',\r\n''10.60.18.24'',\r\n''10.60.24.14'',\r\n''10.60.17.17'',\r\n''10.60.18.14'',\r\n''10.60.27.11'',\r\n''10.60.23.16'',\r\n''10.60.23.17'',\r\n''10.60.19.13'',\r\n''10.60.19.20'',\r\n''10.60.17.11'',\r\n''10.60.39.44'',\r\n''10.60.19.24''\r\n) \r\nand date > ''2015-07-16 00:00:00'')', 2),
(32, 'Обновление смотрящего', 'update watcher.smotr_update set topicality=''false'' where topicality=''true'';\r\nINSERT INTO watcher.smotr_update (version, file, note, topicality)\r\nVALUES\r\n\t(\r\n\t\t''9.3(RC-5)'',\r\n\t\tNULL,\r\n\t\t''Смотрящий'',\r\n\t\t''true''\r\n\t);\r\n', 2),
(33, 'port_info_dslam ports last info, not poll', '--работает\r\nselect a.host_name,a.host,a.port_id,a.port,port_status,ip_line,profile_line,profile_iptv,vlan_line,pvc_line,vlan_iptv,pvc_iptv,edsnr,eda,eusnr,eua,a.date \r\nfrom port_info.dslam_ports a \r\n--LEFT JOIN smotr_mac_table a ON (((a.ip = (sdp.host)::inet) AND ((a.port)::text = (sdp.port)::text))))\r\nwhere (a.host like ''10.60.39.%'' or a.host = ''10.60.52.2'' or a.host = ''10.60.52.34'' or a.host = ''10.60.52.66'' or a.host = ''10.60.52.98''\r\nor a.host = ''10.60.65.131'' or a.host = ''10.60.65.163'' )\r\nand a.date = (select max(date) from port_info.dslam_ports where host=a.host)\r\norder by a.host\r\n\r\n\r\n\r\n--крайне медленный\r\nselect a.host_name,a.host,a.port_id,a.port,port_status,ip_line,profile_line,profile_iptv,vlan_line,pvc_line,vlan_iptv,pvc_iptv,mac,edsnr,eda,eusnr,eua,a.date \r\nfrom public.c_vpn_view_smotr_dslam_ports a \r\ninner join port_info.import_technograd f on f.ipaddr = a.host\r\nwhere f.uzel like ''%Алдан%'' and a.date = (select max(date) from public.c_vpn_view_smotr_dslam_ports where host=a.host)\r\norder by port_id\r\n\r\n\r\n--сравнение с техноградом, какие дслам не опрашиваются по Алдану\r\nselect a.uzel,a.nom_oborud,a.marka,a.ipaddr,b."host",b."max" from port_info.import_technograd a \r\nleft outer join (\r\nSELECT DISTINCT d.host,max(d.date)\r\n   FROM smotr_dslam_ports d\r\ninner join port_info.import_technograd t on t.ipaddr=d.host\r\n  WHERE t.uzel like ''%Алдан%''\r\ngroup by d.host\r\n) b on b.host = a.ipaddr\r\nwhere a.ipaddr like ''10.6%'' and a.uzel like ''%Алдан%''\r\norder by b.host desc\r\n\r\n\r\n--какие dslam опрашиваются в Алдане\r\n SELECT DISTINCT d.host,max(d.date)\r\n   FROM smotr_dslam_ports d\r\ninner join port_info.import_technograd t on t.ipaddr=d.host\r\n  WHERE t.uzel like ''%Алдан%''\r\ngroup by d.host\r\n  ORDER BY d.host;\r\n\r\n\r\n--сравнение с техноградом, какие дслам не опрашиваются\r\nselect a.uzel,a.nom_oborud,a.marka, a.ipaddr,b."host" from port_info.import_technograd a \r\nleft outer join dslam_ports_hostname_uus_view b on b.host = a.ipaddr\r\nwhere ipaddr like ''10.6%''\r\norder by host desc\r\n', 9),
(34, 'mac iptv svod', 'select name,ip,vlan,sum(count_mac_amino) as count_amino,sum(count_mac_sml) as count_sml,sum(other_mac) as count_other,max(last_poll) as last_poll\r\nfrom (\r\nselect b.name, ip, vlan,\r\ncase when cast(mac as varchar(18)) like ''00:02:02%'' then 1 else 0 end as count_mac_amino,\r\ncase when cast(mac as varchar(18)) like ''e4:27:71%'' then 1 else 0 end as count_mac_sml,\r\ncase when cast(mac as varchar(18)) not like ''00:02:02%'' and cast(mac as varchar(18)) not like ''e4:27:71%'' then 1 else 0 end as other_mac,\r\ntimestamp_operation as last_poll\r\nfrom public.smotr_mac_table_iptv \r\nLEFT OUTER JOIN public.hosts b on b.host = cast(substring(cast(smotr_mac_table_iptv.ip as varchar(18)) from 1 for strpos(cast(smotr_mac_table_iptv.ip as varchar(18)), ''/'')-1 ) as varchar(15))\r\ngroup by b.name,ip,mac,timestamp_operation,vlan ) a\r\ngroup by name,ip,vlan\r\norder by ip\r\n\r\n\r\n\r\n\r\n\r\nselect name,ip,vlan,\r\nsum(count_mac_amino) as count_amino,\r\nsum(count_mac_sml) as count_sml,\r\nsum(count_mac_mag) as count_mag,\r\nsum(count_mac_ps) as count_ps,\r\nsum(count_mac_mot) as count_mot,\r\nsum(other_mac) as count_other,\r\nmax(last_poll) as last_poll\r\nfrom (\r\nselect b.name, ip, vlan,\r\ncase when cast(mac as varchar(18)) like ''00:02:02%'' then 1 else 0 end as count_mac_amino,\r\ncase when cast(mac as varchar(18)) like ''e4:27:71%'' then 1 else 0 end as count_mac_sml,\r\ncase when cast(mac as varchar(18)) like ''00:1a:79%'' then 1 else 0 end as count_mac_mag,\r\ncase when cast(mac as varchar(18)) like ''1c:bb:a8%'' then 1 else 0 end as count_mac_ps,\r\ncase when cast(mac as varchar(18)) like ''00:02:9b%'' then 1 else 0 end as count_mac_mot,\r\ncase when cast(mac as varchar(18)) not like ''00:02:02%'' \r\n\t\t\tand cast(mac as varchar(18)) not like ''e4:27:71%'' \r\n\t\t\tand cast(mac as varchar(18)) not like ''00:1a:79%'' \r\n\t\t\tand cast(mac as varchar(18)) not like ''1c:bb:a8%'' \r\n\t\t\tand cast(mac as varchar(18)) not like ''00:02:9b%'' \r\n\t\t\tthen 1 else 0 end as other_mac,\r\ntimestamp_operation as last_poll\r\nfrom public.smotr_mac_table_iptv\r\nLEFT OUTER JOIN public.hosts b on b.host = cast(substring(cast(smotr_mac_table_iptv.ip as varchar(18)) from 1 for strpos(cast(smotr_mac_table_iptv.ip as varchar(18)), ''/'')-1 ) as varchar(15))\r\ngroup by b.name,ip,mac,timestamp_operation,vlan ) a\r\ngroup by name,ip,vlan\r\norder by ip', 9),
(35, 'substring concat strpos cast mac update port', 'update port_info.mac_table set port=''Ethernet''||substring(port from 4) \r\nwhere port like ''Eth0%'' \r\nsubstring(cast(access_date as varchar(20)) from 1 for strpos(cast(access_date as varchar(20)), '' '')) as Дата\r\n \r\ncast(access_date as varchar(30)) like ''2014-07-15%''\r\n\r\n\tselect distinct a.ip, c.name as hostname, a.port, a.mac, b.msisdn, b.status, b.tp\r\n\tfrom zabbix_extensions.mac_table a, zabbix_extensions.mac_from_excel b, public.hosts c\r\n\twhere a.mac=b.mac \r\n\t\tand c.host=cast(substring(cast(a.ip as varchar(18)) from 1 for strpos(cast(a.ip as varchar(18)), ''/'')-1 ) as varchar(15))\r\n\t\tand c.host not like ''172.16.84.%''\r\n\torder by a.ip;', 2),
(36, 'mysql insert ON DUPLICATE KEY UPDATE', 'insert into ipaddress\r\n(\r\n  ip,\r\n  punkt,\r\n  speed\r\n)\r\nselect \r\na.ip,\r\n''centr'',\r\n512\r\nfrom temp_ips a\r\nON DUPLICATE KEY UPDATE\r\nip=VALUES(ip),\r\npunkt=''centr'',\r\nspeed=512,\r\nstatus=''ON'',\r\noperation_timestamp=''0000-00-00 00:00:00''\r\n\r\n\r\n\r\n\r\ninsert into ipaddress\r\n(ip,netmask,service_id,status,timestamp,operation_timestamp,operation_timestamp_shaper2)\r\nselect \r\na.ip,\r\na.netmask,\r\na.service_id,\r\na.status,\r\na.timestamp,\r\na.operation_timestamp,\r\na.operation_timestamp_shaper2\r\nfrom temp_ipaddress a\r\nON DUPLICATE KEY UPDATE\r\nstatus=VALUES(status),\r\nservice_id=VALUES(service_id),\r\nnetmask=VALUES(netmask),\r\ntimestamp=VALUES(timestamp),\r\noperation_timestamp=VALUES(operation_timestamp),\r\noperation_timestamp_shaper2=VALUES(operation_timestamp_shaper2)', 2),
(37, 'date_trunc raport', 'INSERT INTO watcher.comments_raport_smena (fio, DATE, comments, smena_id)\r\nVALUES\r\n\t(\r\n\t\t''Михайлов Андрей'',\r\n\t\tdate_trunc(''minute'', now()),\r\n\t\t''ооооооооо выа выгщнапви lidjfh klsdjfg'',\r\n\t\t283\r\n\t)', 2),
(38, 'date_part interval', 'where (date_part(''hour'', closed_date) between 9 and 17) \r\nand (closed_date-start_date< interval ''24 hours'')', 2),
(39, 'watcher smotr_hosts view', 'CREATE OR REPLACE VIEW "watcher"."smotr_hosts_view" AS \r\n SELECT users.alias AS username,\r\n    users.name,\r\n    users.passwd AS password,\r\n    rights.permission,\r\n    rights.id,\r\n    groups.name AS group_name,\r\n    hosts.host,\r\n    hosts.name AS description,\r\n    users.userid AS uid,\r\n    hosts.hostid,\r\n    users.userid,\r\n    hosts.description as descr_null,\r\n    groups.groupid AS group_id\r\n   FROM hosts_groups,\r\n    groups,\r\n    hosts,\r\n    rights,\r\n    users_groups,\r\n    users,\r\n    host_list\r\n  WHERE (((((((groups.groupid = hosts_groups.groupid) AND (hosts.hostid = hosts_groups.hostid)) AND (rights.id = hosts_groups.groupid)) AND (users_groups.usrgrpid = rights.groupid)) AND (users.userid = users_groups.userid)) AND (hosts.status = 0)) AND ((host_list.host)::text = (hosts.host)::text));\r\n\r\nALTER TABLE "watcher"."smotr_hosts_view" OWNER TO "pgsql";', 9),
(40, 'no iptv_zayacy in zabbix', 'select a.host, a.name, a.status as "disabled=1" from public.hosts a, public.groups b, public.hosts_groups c\r\nwhere a.host not in (\r\n\tselect distinct cast(substring(cast(ip as varchar(18)) from 1 for strpos(cast(ip as varchar(18)), ''/'')-1 ) as varchar(15))\r\n\tfrom zabbix_extensions.mac_table\r\n\t)\r\n\tand a.hostid=c.hostid and b.groupid=c.groupid and b.groupid in (166,117)\r\n--      and ((name like ''%MA56%'') or host like ''10.0.%'' or host like ''10.250.%'')\r\n      --or (host like ''10.0.%'' or host like ''10.250.%'' and host not like ''10.60.%'')\r\norder by host', 9),
(41, 'Цикл перебора выбранных строк в DataGridView', 'foreach (DataGridViewRow curr in dgvAlarms.SelectedRows) {\r\n\tint m_Event_id = Convert.ToInt32(curr.Cells[2].Value);\r\n\tstring t = curr.Cells[7].Value.ToString();\r\n}', 5),
(42, 'Преобразование строки в дату', 'to_timestamp(duration, ''DD дн HH24 ч MI м'')', 2),
(43, 'perl grep ip адрес', 'perl -n -e ''/(\\d+\\.\\d+\\.\\d+\\.\\d+)/ && print "$1\\n"'' *.log\r\nperl -n -e ''/(\\d+\\.\\d+\\.\\d+\\.\\d+)(.+)(port 23)/ && print "$1\\n"'' out5600.log', 7),
(44, 'Заполнение переменных результатами вывода команды и запись в файл', '\r\n    my (@ports,$Port,$PortType,$PortStatus,$LineProfile,$Profiles);\r\n\r\n    $telnet->print("display elabel 0\\n");\r\n    #    $telnet->waitfor(''/\\%\\%$/'');\r\n\r\n    $string=""; $data=""; $offset=0;\r\n    while ($data !~ /\\%\\%$/) {\r\n\t$string=$telnet->get();\r\n\t$data=$data.$string;\r\n\tif (index($data,''}'',$offset)>-1) {\r\n        \t$telnet->print("\\n");\r\n        \t$offset=index($data,''}'',$offset)+1;\r\n        };\r\n    };\r\n\r\n   #<F5><D0><D2><C1><D7><CC><D1><C0><DD><C1><D1> <D0><CF><D3><CC><C5><C4><CF><D7><C1><D4><C5><CC><D8><CE><CF><D3><D4><D8> (telnet <D0><C5><D2><C5><C4><C1><C5><D4> ESC[1A,\r\n   #$data =~ s/\\e\\[1A/\\n/g;\r\n   #print $data."\\n";\r\n    my $count=0;\r\n    @strings=split(/\\n/,$data);\r\n    for ($k=0; $k<scalar(@strings); $k++) {\r\n    \t$string=$strings[$k];\r\n    \twhile ($string =~ /  /) { $string =~ s/  / /g; };\r\n    \t$string=~ s/^\\s+//g;\r\n    \t$string =~ s/\\s+$//g;\r\n\t#print $string."\\n";\r\n\t#($Port,$PortType,$PortStatus,$LineProfile)=split(/ /,$string);\r\n        #if ( $Port=~/\\d+/ && length($PortType)>0 && length($PortStatus)>0 && length($LineProfile)>0 ) {\r\n            #$ports[$j]="0/".$SlotID."/".$Port."#".$PortStatus."#".$LineProfile;\r\n            #$j++;\r\n        #}\r\n    \tif ( $string =~ /BoardType/ ) {\r\n    \t\t@strs=split(/\\=/,$string);\r\n    \t\tif (scalar(@strs)==2) {\r\n        \t\t$board=$strs[1];\r\n        \t\t$count=1;\r\n    \t\t}\r\n    \t};\r\n    \tif ( $string =~ /BarCode/ ) {\r\n    \t\t@strs=split(/\\=/,$string);\r\n    \t\tif (scalar(@strs)==2) {\r\n        \t\t$serial=$strs[1];\r\n        \t\t$count=2;\r\n\t\t}\r\n\t\t#    print $serial.", ".$count."\\n";\r\n    \t};\r\n    \tif ($count == 2) {\r\n    \t\topen(FILE, ">>/home/mikhan/dslams_get_info/files/$host.txt") or die ("Can not open file: log Error: $!\\n");\r\n    \t\tprint FILE "5616;".$board.";".$serial.";".$host.";".$ver."\\n";\r\n    \t\tclose(FILE);\r\n    \t\t$count=0;\r\n    \t}\r\n    };\r\n', 26),
(45, 'pg результат select в переменную', 'use DBI;\r\n\r\n$dbh = DBI->connect("dbi:Pg:dbname=zabbix;host=172.16.4.7;port=6432","zabbix","zabbix",{PrintError => 0, AutoCommit => 0});\r\nif (defined($DBI::err)) { print $DBI::errstr . "\\n"; }\r\n\r\n$query = "select hostid from public.hosts where host = ''$ipaddr''";\r\n$sth = $dbh->prepare($query);\r\n$rv = $sth->execute;\r\n\r\n$table = $sth->fetchall_arrayref;\r\n\r\n$sth->finish();\r\n$dbh->commit();\r\n\r\nif (!defined $rv) { print "error while do ''$query'' beda: " . $dbh->errstr . "\\n"; exit(0); }\r\n\r\n$fields = $table->[0];\r\n\r\n$HID = @$fields[0];\r\n\r\nprint "ID=$HID\\n";\r\n$dbh->disconnect();\r\n', 10),
(46, 'pg select - цикл по результатам запроса', 'use DBI;\r\nmy ($dbh,$sth,$rv,$rc,$statement);\r\nmy (@row);\r\n$dbh = DBI->connect("DBI:Pg:dbname=zabbix;host=127.0.0.1;port=6432","zabbix","zabbix",{PrintError => 0, AutoCommit => 0}) or die "ERROR: could not connect to database: $DBI::errstr";\r\n$sth = $dbh->prepare("select * from port_info.report_svodka_shpd order by date_start_alarm");\r\nif ( !defined $sth ) { die "Cannot prepare statement: $DBI::errstr\\n"; }\r\n$sth->execute;\r\n$j=4;\r\nwhile (@row = $sth->fetchrow()){\r\n    $worksheet0->write_number($j,0,$row[0],$format_text);\r\n    $worksheet0->write_string($j,1,$row[1],$format_text);\r\n    $worksheet0->write_string($j,2,$row[2],$format_text);\r\n    $worksheet0->write_string($j,3,$row[3],$format_text);\r\n    $worksheet0->write_string($j,4,$row[4],$format_text);\r\n    $worksheet0->write_string($j,5,$row[5],$format_text);\r\n    $worksheet0->write_string($j,6,$row[6],$format_text);\r\n    $worksheet0->write_string($j,7,$row[7],$format_text);\r\n    $worksheet0->write_string($j,8,$row[8],$format_text);\r\n    $worksheet0->write_string($j,9,$row[9],$format_text);\r\n    $j++;\r\n}\r\n\r\n$sth->finish;\r\n\r\n$rc = $dbh->disconnect;', 10),
(47, 'pg операции DML', '  use DBI;\r\n\r\n  $dbh = DBI->connect("dbi:Pg:dbname=zabbix;host=127.0.0.1;port=6432","zabbix","zabbix", {PrintError => 0, AutoCommit => 0});\r\n  if (defined($DBI::err)) { print $DBI::errstr . "\\n"; exit($DBI::err); }\r\n\r\n  $query = "update port_info.import_technograd set date_alarm=now(),is_alarm=true where ipaddr=''$host''";\r\n  $query = "INSERT INTO port_info.mac_table SELECT ''$host'',''$port_val'',''$mac_val''";\r\n  $query = "DELETE FROM port_info.mac_table where ip = ''$host''";    \r\n\r\n  $dbh->begin_work();\r\n  $rv = $dbh->do($query);\r\n  $dbh->commit();\r\n  if (!defined $rv) { print "error while do ''$query'' beda: " . $dbh->errstr . "\\n"; }\r\n  $dbh->disconnect();\r\n\r\n\r\n$statement="set names \\"utf-8\\"";\r\n$sth = $dbh -> prepare($statement) or die "Не  могу  подготовить $statement: $DBI::errstr\\n";\r\n$rv = $sth -> execute or die "Не могу выполнить: $DBI::errstr";\r\n', 10),
(48, 'Чтение из файла в кодировке', 'use Encode;\r\n\r\nmy $filename = ''/home/mikhan/dslams_get_info/data.txt'';\r\nmy $res;\r\nmy $model;\r\n\r\nif (open(my $fh, ''<:encoding(KOI8-R)'', $filename)) {\r\n    while (my $row = <$fh>) {\r\n        chomp $row;\r\n        print "$row\\n";\r\n    }\r\n    close $fh;\r\n}', 22),
(49, 'запуск программы из скрипта', 'chomp($res = `/usr/home/mikhan/dslams_get_info/ex_script_dslam.sh "$row" "$model" "$r[1]"`);', 7),
(50, 'pg select - цикл индексный по результатам запроса', '$dbh = DBI->connect("dbi:Pg:dbname=zabbix;host=127.0.0.1;port=6432","zabbix","zabbix",{PrintError => 0, AutoCommit => 0});\r\nif (defined($DBI::err)) { print $DBI::errstr . "\\n"; exit($DBI::err); }\r\n$query = "select * from port_info.igmp_querier";\r\n#$query = "select * from port_info.igmp_querier where cast(substring(cast(ip_address as varchar(18)) from 1 for strpos(cast(ip_address as varchar(18)), ''/'')-1 ) as varchar(15)) like \\''172.16.9.20\\%\\''";\r\n$sth = $dbh->prepare($query);\r\n$rv = $sth->execute;\r\n\r\n$table_querier = $sth->fetchall_arrayref;\r\n\r\n$sth->finish();\r\n$dbh->commit();\r\n\r\nif (!defined $rv) {\r\n      print "error while do ''$query'' beda: " . $dbh->errstr . "\\n";\r\n          exit(0);\r\n    }\r\n\r\nmy $len = 0+@$table_querier-1;\r\nmy $i = 0;\r\nlocal @curr_vlans;\r\n\r\nwhile ($i<=$len) {\r\n\r\n    $fields_querier = $table_querier->[$i];\r\n    print "@$fields_querier[0]\\t@$fields_querier[2]\\t@$fields_querier[3]\\n";\r\n    $host = @$fields_querier[0];\r\n    if (@$fields_querier[2] =~ /5328/ || @$fields_querier[2] =~ /9312/) {\r\n\r\n        @curr_vlans = split(/,/,@$fields_querier[3]);\r\n            #print $curr_vlan."\\t";\r\n            $res = iptv_mac5328("$host");\r\n            #if ($res == 1) { next; }\r\n    \r\n    }\r\n    else { print "\\n\\nunknown model: @$fields_querier[2]\\n\\n"}\r\n\r\n    $i=$i+1;\r\n\r\n    if ($i > 25 ) { last; }\r\n\r\n}\r\n$dbh->disconnect();\r\n', 10),
(51, 'Запись в файл строки', '           open(FILE, ">>/var/log/mac/mac_dlink.log") or die ("Can not open file: log Error: $!\\n");\r\n           print FILE $date_begin." -- query:".$query."\\n";\r\n           close(FILE);', 22),
(52, 'Преобразование из строки в число', '#$row[0] - строка\r\n$phone=$row[0]+0;\r\n#теперь в $phone хранится число', 7),
(53, 'Преобразование строки из одной кодировки в другую', 'use Encode;\r\n\r\nmy $win_msg = $msg;\r\nEncode::_utf8_off( $win_msg );\r\nEncode::from_to( $win_msg, ''utf8'', ''windows-1251'');\r\n\r\n\r\nmy $adr=$row[1];\r\nEncode::_utf8_off( $adr );\r\nEncode::from_to( $adr, ''utf8'', ''koi8-r'');', 7),
(54, 'mysql цикл и работа в другой кодировке', 'use DBI;\r\n\r\nmy $DBHOST="94.245.137.19";\r\nmy $DB="adsl";\r\nmy $DBUSER="user";\r\nmy $DBPASS="123";\r\n\r\n$dbh = DBI->connect("DBI:mysql:$DB:$DBHOST", $DBUSER, $DBPASS) or die "ERROR: could not connect to database: $DBI::errstr";\r\n\r\n#БД на сервере в кодировке ''koi8-r'', будем работать в utf-8, для последующей работы с другим сервером, БД которого в кодировке utf-8 \r\n\r\n$statement="set names \\"utf8\\"";\r\n$sth = $dbh -> prepare($statement) or die "Can not prepare $statement: $DBI::errstr\\n";\r\n$rv = $sth -> execute or die "Can not execute: $DBI::errstr";\r\n\r\n$statement="select ip,chantype from adsl.ip_all_view where (ip not like ''%.0'') and (ip not like ''%.255'')";\r\n$sth = $dbh -> prepare($statement) or die "Can not prepare $statement: $DBI::errstr\\n";\r\n$rv = $sth -> execute or die "Can not execute: $DBI::errstr";\r\n\r\n#БД Сервера в кодировке utf-8\r\n$dbh1 = DBI->connect("dbi:Pg:dbname=zabbix;host=127.0.0.1;port=6432","zabbix","zabbix",{PrintError => 0, AutoCommit => 0});\r\nif ($DBI::err != 0) { print $DBI::errstr . "\\n"; exit($DBI::err); }\r\n\r\n  $query = "delete from port_info.ntp_adsl_ip";\r\n  $dbh1->begin_work();\r\n  $rv1=$dbh1->do($query);\r\n  $dbh1->commit();\r\n  if (!defined $rv1) { print "error while do ''$query'' beda: " . $dbh1->errstr . "\\n"; }\r\n\r\nwhile ( @row = $sth->fetchrow()) {\r\n#данные из 1 сервера получили в utf-8, поэтому вставка в БД 2 сервера будет в utf-8\r\n  $query = "insert into port_info.ntp_adsl_ip select ''$row[0]'',''$row[1]''";\r\n  $dbh1->begin_work();\r\n  $rv1=$dbh1->do($query);\r\n  $dbh1->commit();\r\n  if (!defined $rv1) { print "error while do ''$query'' beda: " . $dbh1->errstr . "\\n"; }\r\n}\r\n\r\n$dbh1->disconnect;\r\n$dbh->disconnect;', 10),
(55, 'HTTP GET', 'use Encode;\r\nuse LWP::UserAgent;\r\nuse warnings;\r\n\r\n#use open qw( :encoding(koi8-r) );\r\n\r\nmy $ua = LWP::UserAgent->new;\r\n\r\nmy $num_ustr = $ARGV[0];\r\n\r\nmy $server_endpoint = "http://10.199.1.37/proverka/get_tech_data.php?num=".$num_ustr;\r\n\r\n# set custom HTTP request header fields\r\nmy $req = HTTP::Request->new(GET => $server_endpoint);\r\n$req->header(''content-type'' => ''application/x-www-form-urlencoded'');\r\n$response = $ua->request($req);\r\nif ($response->is_success) {\r\n    print $response->decoded_content."\\n";\r\n    my @fields=split(/\\|/,$response->decoded_content);\r\n    my @res=split(/\\=/,$fields[7]);\r\n    my $res_ip=$res[1];\r\n    if (defined($res_ip)) { print "$res_ip\\n";}\r\n    else { print "no ip\\n";}\r\n}\r\nelse {\r\n    print STDERR $response->status_line, "\\n";\r\n}', 7),
(56, 'ip адреса и маски', 'use Net::IP;\r\n\r\nmy $ipnet = $ARGV[0];\r\n\r\n#my $ip = new Net::IP (''193.0.1/24'') or die (Net::IP::Error());\r\nmy $ip = new Net::IP ($ipnet) or die (Net::IP::Error());\r\n  print ("IP  : ".$ip->ip()."\\n");\r\n    print ("Sho : ".$ip->short()."\\n");\r\n    print ("Bin : ".$ip->binip()."\\n");\r\n    print ("Int : ".$ip->intip()."\\n");\r\n    print ("Mask: ".$ip->mask()."\\n");\r\n    print ("Broadcast: ".$ip->last_ip()."\\n");\r\n    my $lastip = new Net::IP ($ip->last_ip());\r\n    $lastip = $lastip+(-1);\r\n    print ("Last: ".$lastip->ip()."\\n");\r\n    my $firstip = new Net::IP ($ipnet);\r\n    $firstip = $firstip+1;\r\n    print ("first: ".$firstip->ip()."\\n");\r\n    print ("Len : ".$ip->prefixlen()."\\n");\r\n    print ("Size: ".$ip->size()."\\n");\r\n    print ("Type: ".$ip->iptype()."\\n");\r\n    print ("Rev:  ".$ip->reverse_ip()."\\n");', 7),
(57, 'отправка email КСПД', 'use strict;\r\nuse MIME::Lite;\r\nuse encoding "ru_RU.KOI8R";\r\nuse POSIX qw(strftime);\r\n\r\n#my $date_begin = strftime("%Y-%m-%d %H:%M:%S", localtime( time() - 21600 ));\r\n\r\nmy ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime( time() - 21600 );\r\n$year+=1900;\r\n$mon++;\r\nif ($mday<10) {$mday="0".$mday;}\r\nif ($mon<10) {$mon="0".$mon;}\r\nif ($hour<10) {$hour="0".$hour;}\r\nif ($min<10) {$min="0".$min;}\r\nif ($sec<10) {$sec="0".$sec;}\r\n\r\nmy $date="${year}-${mon}-${mday} ${hour}:${min}:${sec}";\r\n\r\n\r\nmy $user = ''zabbix@dv.rt.ru'';\r\nmy $msg = MIME::Lite->new(\r\n    From    => ''zabbix.sakha@dv.rt.ru'',\r\n    To      => ''Mikhaylov_AN@dv.rt.ru'',\r\n    Subject => ''Рапорт ошибок на портах'',\r\n    Type    => ''multipart/mixed''\r\n);\r\n$msg->attach(\r\n    Type => ''text/plain; charset=UTF-8'',\r\n    Data => "Рапорт ЦСПД тест 123\\n".$date\r\n);\r\n$msg->send(''smtp'', ''10.200.130.50'', Timeout => 60, AuthUser=>$user );\r\n', 7),
(58, 'Стэк - заполнение и цикл по каждому элементу', '#my @mac_arr;\r\npush (@mac_arr, $mac_str[1].";".$mac_str[3]);\r\n\r\n#.......\r\n\r\n\r\nwhile ($value = pop (@mac_arr)) {\r\n    ($mac_val,$port_val)=split(/;/,$value);\r\n    #print $value."\\n";\r\n    $mac_val =~ s/-//g;\r\n    print $port_val.";".$mac_val."\\n";\r\n}', 7),
(59, 'Операции со строками', '$EDSNR=~ s/(\\d+)(\\.)(\\d+)\\D/$1\\.$3/g;\r\n$num_ustr =~ tr/\\015//d;\r\n$gr = substr($gr, 0, length($gr)-1);\r\n$string =~ s/--More--\\s+(\\d{2}.*)/$1/g;\r\n\r\n#Удаление backspace\r\n$string =~ tr/\\b//d; \r\n', 7),
(60, 'массивы с произвольными элементами', 'my (%pvc,@pvc);\r\n\r\n$Port="0/1/5";\r\n$pvc{$Port}=$pvc{$Port}."#".$ip;\r\n\r\nif ( defined($pvc{$Port}) ) {\r\n$pvc{$Port}=$pvc{$Port}."|".$vlans[$i]."#".$VPI."#".$VCI;\r\n}\r\n\r\n', 7),
(61, 'ssh', 'use Net::SSH::Perl;\r\n\r\nmy $user="root";\r\nmy $pass="123";\r\nmy ($cmd,$host);\r\n\r\n$host="94.245.137.25";\r\n\r\nmy $ssh = Net::SSH::Perl->new($host, options=>["protocol 2"]);\r\n$ssh->login($user, $pass);\r\n\r\n    $cmd = "ls / -al";\r\n    my($stdout, $stderr, $exit) = $ssh->cmd($cmd);\r\n    print "$stdout\\n";\r\n', 7),
(62, 'Отчеты о доступности за период', '--История доступности за период по одному устройству из zabbix\r\nselect itemid,TIMESTAMP WITH TIME ZONE ''epoch'' + clock * INTERVAL ''1 second'',value from history_uint where --itemid=803454 and clock > date_part(''epoch'', now()-interval ''1 day'')\r\nclock > EXTRACT(''epoch'' from now()-interval ''1 day'')::int and\r\nitemid = (\r\n\tselect itemid from items where name = ''Ping'' and hostid=(\r\n\t\tselect hostid from hosts where host=''10.60.39.54''\r\n\t)\r\n)\r\n\r\n\r\n-----Статистика доступности устройств из БД zabbix, которые есть в import_technograd\r\n\r\n--не работает\r\nselect a.host, a.name, count(b.value) from hosts a, history_uint b \r\nwhere\ta.hostid = (select hostid from items where name = ''Ping'' and itemid=b.itemid)\r\nand b.clock > EXTRACT(''epoch'' from now()-interval ''1 day'')::int\r\nand a.host in (select ipaddr from port_info.import_technograd)\r\ngroup by a.host, a.name\r\n--медленно работает\r\nselect a.host, a.name, count(d.value) as otpravleno, sum(d.value) as polucheno, ceil(sum(d.value)*100/count(d.value)) as percent_dostupnosty from "public".hosts a\r\ninner join "public".items b on a.hostid=b.hostid\r\ninner join "public".history_uint d on b.itemid=d.itemid\r\n--inner join port_info.import_technograd e on a.host=e.ipaddr\r\nwhere b.name=''Ping'' and d.clock > EXTRACT(''epoch'' from now()-interval ''1 day'')::int\r\nand host in (\r\nselect ipaddr from port_info.import_technograd where marka not like ''%S5328%'' and (a.host like ''10.0%'' or a.host like ''10.250%'' or a.host like ''172.16.9%'' or a.host like ''172.16.6%''))\r\n--and (a.host like ''10.0%'' or a.host like ''10.250%'' or a.host like ''172.16.9%'' or a.host like ''172.16.6%'' or a.host like ''172.16.15%'')\r\nand (a.name not like ''%S5328%'')\r\ngroup by a.host, a.name\r\norder by percent_dostupnosty\r\n--этот лучше\r\nselect a.ipaddr, a.marka, a.nom_oborud, count(d.value) as otpravleno, sum(d.value) as polucheno, ceil(sum(d.value)*100/count(d.value)) as percent_dostupnosty from port_info.import_technograd a\r\ninner join "public".hosts f on a.ipaddr=f.host\r\ninner join "public".items b on f.hostid=b.hostid\r\ninner join "public".history_uint d on b.itemid=d.itemid\r\nwhere b.name=''Ping'' and d.clock > EXTRACT(''epoch'' from now()-interval ''1 day'')::int\r\nand (a.ipaddr like ''10.0%'' or a.ipaddr like ''10.250%'' or a.ipaddr like ''172.16.9%'' or a.ipaddr like ''172.16.6%'')\r\nand (a.marka not like ''%S5328%'') and (a.marka not like ''%9424%'')\r\ngroup by a.ipaddr, a.marka, a.nom_oborud\r\norder by percent_dostupnosty\r\n\r\n-----------история аварий по хосту за определенный период, value - триггер = 0 restore, value = 1 problem\r\nselect distinct a.source,a.object,f.name,f.host,h.name, a.objectid, date_trunc(''minute'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second''), a.value \r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') > ''2015-05-03 00:00:00'' \r\n--\tand (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') < ''2016-05-09 00:00:00''\r\nand (h.name=''Ping'' or h.name=''ping'')\r\nand f.host=''10.60.66.3'' and b.description like ''Ping%''\r\norder by date_trunc(''minute'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n\r\n--история аварий по хосту из import_technograd\r\nselect a.*, b.nom_oborud,b.ipaddr\r\nfrom port_info.comments_import_technograd_archive a\r\nINNER JOIN port_info.import_technograd b on a.tech_id=b."id"\r\nwhere date_end_alarm is not null and date_start_alarm is not null and b.ipaddr=''10.250.132.234''\r\norder by date_end_alarm\r\n', 27),
(63, 'Квартальный отчет - кол-во остановок по месяцам и часы простоя', '-- квартальный отчет из import_technograd - кол-во остановок по месяцам и общее количество часов простоя по Якутску\r\n\r\nselect date_trunc(''month'', a.date_end_alarm),count(a.tech_id),\r\ndate_trunc(''second'',(extract(epoch from sum(a.date_end_alarm-a.date_start_alarm)) * interval ''1 second'')) as hours_minutes_seconds\r\nfrom port_info.comments_import_technograd_archive a\r\nINNER JOIN port_info.import_technograd b on a.tech_id=b."id"\r\nwhere date_end_alarm is not null and date_start_alarm is not null and b.uzel=''ЯФ ЯКУТСК''\r\ngroup by date_trunc(''month'', date_end_alarm)\r\norder by date_trunc(''month'', date_end_alarm)\r\n', 27),
(64, 'Число аварий э/э по узлам', '-- отчет кол-во аварий э/э по узлам из import_technograd(по числу date_start_alarm - начиная с июля)\r\n\r\nselect b.uzel,b.nom_oborud, b.ipaddr, count( distinct a.date_start_alarm)\r\n--date_trunc(''second'',(extract(epoch from sum(a.date_end_alarm-a.date_start_alarm)) * interval ''1 second'')) as hours_minutes_seconds\r\nfrom port_info.comments_import_technograd_archive a\r\nINNER JOIN port_info.import_technograd b on a.tech_id=b."id"\r\nwhere date_end_alarm is not null and date_start_alarm is not null and b.uzel=''ЯФ ЯКУТСК''\r\nand (a.comments like ''%вари%'' or a.comments like ''%ткл%'' or a.comments like ''%нерг%'' or a.comments like ''%э/э%'' or a.comments like ''%Э/Э%'')\r\ngroup by b.uzel,b.nom_oborud, b.ipaddr\r\norder by b.ipaddr\r\n\r\n\r\n\r\n-- отчет кол-во аварий э/э по узлам из import_technograd(по числу date (дата комментария) - начиная с мая)\r\n\r\nselect b.uzel,b.nom_oborud, b.ipaddr,count(a.date) from port_info.comments_import_technograd_archive a \r\nINNER JOIN port_info.import_technograd b on a.tech_id=b."id"\r\nwhere \r\n(a.comments like ''%вари%'' or a.comments like ''%ткл%'' or a.comments like ''%нерг%'' or a.comments like ''%э/э%'' or a.comments like ''%Э/Э%'')\r\nand b.uzel like ''%ЯКУТСК%''\r\ngroup by b.uzel,b.nom_oborud, b.ipaddr\r\norder by count(a.date) desc\r\n', 27),
(65, 'Число аварий в разрезе по всем хостам помесячно', '-- отчет - кол-во остановок в разрезе по всем хостам за период помесячно\r\n\r\nselect f.name,f.host,h.name, count(a.value)/2, date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere --(TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') between ''2015-09-01 00:00:00'' and ''2015-09-30 23:59:59'' and\r\n(h.name=''Ping'' or h.name=''ping'') and b.description like ''Ping%'' and a.value=0\r\n--and f.host=''10.250.26.34'' \r\ngroup by f.name,f.host,h.name,date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\norder by f.host--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n', 27),
(66, 'Число остановок в разрезе по Филиалам по неделям за месяц', '-- отчет кол-во остановок в разрезе по Филиалам по неделям\r\n\r\nselect b.period,trim(both '' '' from b.ddd), sum (b.events_count) FROM\r\n((select trim(both '' '' from substring(f.name from 1 for position('' '' in f.name))) as ddd,count(a.value)/2 as events_count, \r\n--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') as ,\r\n''01 - 07.04.2016'' as period\r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') between ''2016-04-01 00:00:00'' and ''2016-04-07 23:59:59''\r\nand (h.name=''Ping'' or h.name=''ping'') and b.description like ''Ping%'' and a.value=0\r\n--and f.host=''10.250.26.34'' \r\ngroup by f.name,date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\norder by substring(f.name from 1 for position('' '' in f.name))--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n)\r\nunion \r\n(select trim(both '' '' from substring(f.name from 1 for position('' '' in f.name))) as ddd,count(a.value)/2 as events_count, \r\n--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second''),\r\n''08 - 14.04.2016'' as period\r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') between ''2016-04-08 00:00:00'' and ''2016-04-14 23:59:59''\r\nand (h.name=''Ping'' or h.name=''ping'') and b.description like ''Ping%'' and a.value=0\r\n--and f.host=''10.250.26.34'' \r\ngroup by f.name,date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\norder by substring(f.name from 1 for position('' '' in f.name))--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n)\r\nunion\r\n(select trim(both '' '' from substring(f.name from 1 for position('' '' in f.name))) as ddd,count(a.value)/2 as events_count, \r\n--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second''),\r\n''09 - 21.04.2016'' as period\r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') between ''2016-04-09 00:00:00'' and ''2016-04-21 23:59:59''\r\nand (h.name=''Ping'' or h.name=''ping'') and b.description like ''Ping%'' and a.value=0\r\n--and f.host=''10.250.26.34'' \r\ngroup by f.name,date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\norder by substring(f.name from 1 for position('' '' in f.name))--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n)\r\nunion \r\n(select trim(both '' '' from substring(f.name from 1 for position('' '' in f.name))) as ddd,count(a.value)/2 as events_count, \r\n--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second''),\r\n''22 - 30.04.2016'' as period\r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') between ''2016-04-22 00:00:00'' and ''2016-04-30 23:59:59''\r\nand (h.name=''Ping'' or h.name=''ping'') and b.description like ''Ping%'' and a.value=0\r\n--and f.host=''10.250.26.34'' \r\ngroup by f.name,date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\norder by substring(f.name from 1 for position('' '' in f.name))--date_trunc(''month'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n)\r\n) b\r\ngroup by trim(both '' '' from b.ddd),b.period\r\norder by trim(both '' '' from b.ddd)\r\n', 27),
(67, 'dgv - получение значения выделенной ячейки', '     DataGridViewSelectedRowCollection rows = dgv_ipvpn.SelectedRows;\r\n     int gr_id = Convert.ToInt32(rows[0].Cells[0].Value);\r\n', 6),
(68, 'Преобразование строки в ip адрес', 'cast (b.ip_line as inet)', 2),
(69, 'Преобразование строки из одной кодировки в другую', 'using System;\r\nusing System.Text;\r\n\r\nclass Example\r\n{\r\n   static void Main()\r\n   {\r\n      string unicodeString = "This string contains the unicode character Pi (\\u03a0)";\r\n\r\n      // Create two different encodings.\r\n      Encoding ascii = Encoding.ASCII;\r\n      Encoding unicode = Encoding.Unicode;\r\n\r\n      // Convert the string into a byte array.\r\n      byte[] unicodeBytes = unicode.GetBytes(unicodeString);\r\n\r\n      // Perform the conversion from one encoding to the other.\r\n      byte[] asciiBytes = Encoding.Convert(unicode, ascii, unicodeBytes);\r\n\r\n      // Convert the new byte[] into a char[] and then into a string.\r\n      char[] asciiChars = new char[ascii.GetCharCount(asciiBytes, 0, asciiBytes.Length)];\r\n      ascii.GetChars(asciiBytes, 0, asciiBytes.Length, asciiChars, 0);\r\n      string asciiString = new string(asciiChars);\r\n\r\n      // Display the strings created before and after the conversion.\r\n      Console.WriteLine("Original string: {0}", unicodeString);\r\n      Console.WriteLine("Ascii converted string: {0}", asciiString);\r\n   }\r\n}\r\n// The example displays the following output:\r\n//    Original string: This string contains the unicode character Pi (&#928;)\r\n//    Ascii converted string: This string contains the unicode character Pi (?)', 6),
(70, 'Список недоступных хостов с определенной даты', '--value=1 - проблема\r\nselect distinct f.name,f.host,h.name, date_trunc(''minute'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second''), a.value \r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') > ''2016-10-12 15:00:00''\r\nand (h.name=''Ping'' or h.name=''ping'') and host like ''10.250.%''\r\n--and f.host=''10.250.26.34'' and b.description like ''Ping%''\r\norder by date_trunc(''minute'', TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'')\r\n\r\n', 3),
(71, 'Ручное обновление статусов в import_technograd из БД zabbix', 'update port_info.import_technograd set date_alarm=now(), is_alarm=true where ipaddr in\r\n(\r\nselect distinct f.host\r\nfrom events a \r\ninner join "public".triggers b on b.triggerid=a.objectid\r\ninner join functions r on (r.triggerid=b.triggerid)\r\ninner join items h on (h.itemid=r.itemid)\r\ninner join hosts f on f.hostid=h.hostid\r\nwhere (TIMESTAMP WITH TIME ZONE ''epoch'' + a.clock * INTERVAL ''1 second'') > ''2016-10-12 15:00:00''\r\nand (h.name=''Ping'' or h.name=''ping'') and host like ''10.250.%''\r\n--and f.host=''10.250.26.34'' and b.description like ''Ping%''\r\n)', 3),
(72, 'ping', '    use Net::Ping;\r\n\r\n    $p = Net::Ping->new();\r\n    print "$host is alive.\n" if $p->ping($host);\r\n    $p->close();\r\n\r\n    $p = Net::Ping->new("icmp");\r\n    $p->bind($my_addr); # Specify source interface of pings\r\n    foreach $host (@host_array)\r\n    {\r\n        print "$host is ";\r\n        print "NOT " unless $p->ping($host, 2);\r\n        print "reachable.\n";\r\n        sleep(1);\r\n    }\r\n    $p->close();\r\n\r\n    $p = Net::Ping->new("tcp", 2);\r\n    # Try connecting to the www port instead of the echo port\r\n    $p->{port_num} = getservbyname("http", "tcp");\r\n    while ($stop_time > time())\r\n    {\r\n        print "$host not reachable ", scalar(localtime()), "\n"\r\n            unless $p->ping($host);\r\n        sleep(300);\r\n    }\r\n    undef($p);\r\n\r\n    # High precision syntax (requires Time::HiRes)\r\n    $p = Net::Ping->new();\r\n    $p->hires();\r\n    ($ret, $duration, $ip) = $p->ping($host, 5.5);\r\n    printf("$host [ip: $ip] is alive (packet return time: %.2f ms)\n", 1000 * $duration)\r\n      if $ret;\r\n    $p->close();\r\n\r\n    # For backward compatibility\r\n    print "$host is alive.\n" if pingecho($host);', 7),
(74, 'Связный список Редактируемый', '#include "list_end.h"\r\n\r\nclass edlist: public list\r\n{\r\n public:\r\n void ChangeData(char *old_, char *new_);\r\n};\r\n\r\nvoid edlist::ChangeData(char *old_, char *new_)\r\n{\r\n   ListElement* a;\r\n   a=Search(old_);\r\n   strcpy(a->data,new_);\r\n}\r\n\r\n\r\n#include<iostream.h>\r\nvoid main()\r\n{\r\n   edlist b;\r\n   b.append("Привет");\r\n   b.append("пока");\r\n   b.append("хочу мороженного");\r\n   b.append("Михайлов Андрей");\r\n   b.append("Иванов Иван");\r\n   b.append("Петров Петр");\r\n   b.append("Сидоров Сидор");\r\n   \r\n\tListElement* a = b.first();\r\n\twhile (a!=0) {\r\n\t\tcout<<a->data<<endl;\t\r\n\t\ta=a->next;\r\n\t}\r\n\r\n        b.del();\r\n\r\n\tcout<<endl<<"after delete first element"<<endl<<endl;\t\r\n\r\n\ta = b.first();\r\n\twhile (a!=0) {\r\n\t\tcout<<a->data<<endl;\t\r\n\t\ta=a->next;\r\n\t}\r\n\r\n\tb.ChangeData("пока","goodbye");\t\r\n\tb.ChangeData("Иванов Иван","hui mordjovy");\t\r\n\r\n\tcout<<endl<<"after change element"<<endl<<endl;\t\r\n\r\n\ta = b.first();\r\n\twhile (a!=0) {\r\n\t\tcout<<a->data<<endl;\t\r\n\t\ta=a->next;\r\n\t}\r\n\r\n        a = b.Search("хочу мороженного");\r\n\r\n        if (!a) cout<<"not found!!"<<endl;\r\n        else cout<<a->data<<endl;\r\n\r\n}', 15),
(79, 'Замена в строке', '    $order   = array("\\r\\n", "\\n", "\\r");\r\n    $replace = ''\\n'';\r\n    $col_value1 = str_replace($order, $replace, $col_value1);\r\n', 8),
(81, 'Экранирование символов в строке', '$str_code=addcslashes($str_code,''\\''\\\\'');', 8),
(82, 'Диалог подтверждения действия пользователя', '\r\nDialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);\r\nif(dialogResult == DialogResult.Yes)\r\n{\r\n    //do something\r\n}\r\nelse if (dialogResult == DialogResult.No)\r\n{\r\n    //do something else\r\n}\r\n', 6),
(83, 'Список Текущих аварий для Группы', 'select distinct t.triggerid,t.status,t.description,t.priority,date_trunc(''minute'', TIMESTAMP WITH TIME ZONE ''epoch'' + t.lastchange * INTERVAL ''1 second''),\r\nt.comments,t.url,t.value,h.host \r\nfrom triggers t,hosts h,items i,functions f,groups gg,hosts_groups hg\r\nwhere f.itemid=i.itemid and h.hostid=i.hostid and t.triggerid=f.triggerid and hg.hostid=h.hostid and hg.groupid=gg.groupid and t.status=0\r\nand gg.groupid=222 and t.value=1 \r\n', 3),
(84, 'Проверка числа на четность', '($var%2 ==0)?четное: не четное;', 8),
(85, 'table - цикл по строкам', '        if (AbonTable_notif.getElementsByTagName("tr").length > 1) {\r\n            for (loop = 1; loop < AbonTable_notif.childNodes.length-1; loop++) {\r\n                var items = AbonTable_notif.rows[loop].cells[0].getElementsByTagName("input");\r\n                items.item(0).checked = true;\r\n            }\r\n            //alert(AbonTable_notif.rows[1].cells[1].innerText);\r\n            //alert(items.item(0).checked);\r\n        } ', 28),
(86, 'Изменение видимости блока с checkbox-сами', '<!--Группа чекбоксов вида:-->\r\n                            <div id="cher_elms_id" class="form-group">\r\n                                <div class="checkbox">\r\n                                    <label>\r\n                                        <input type="checkbox" id="chern_vir_sten_id" onchange="JavaScript:check_calc_clc(''chern_vir_sten_id'');" value="1.2">\r\n                                        Выравнивание стен\r\n                                    </label>\r\n                                </div>\r\n                                <div class="checkbox">\r\n                                    <label>\r\n                                        <input type="checkbox" id="chern_vir_pol_id" onchange="JavaScript:check_calc_clc(''chern_vir_pol_id'');" value="1.1">\r\n                                        Выравнивание полов\r\n                                    </label>\r\n                                </div>\r\n                                <div class="checkbox">\r\n                                    <label>\r\n                                        <input type="checkbox" id="chern_molyarnie_id" onchange="JavaScript:check_calc_clc(''chern_molyarnie_id'');" value="1.15">\r\n                                        Молярные работы\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n<!--сама функция на js:-->\r\nfunction block_set_visible(id){\r\n    if (id.checked) {\r\n        if (id.style.display == "none")\r\n        id.style.display = ''block'';\r\n        else id.style.display = ''none'';\r\n    }\r\n    else {\r\n        if (id.style.display == "block")\r\n        id.style.display = ''none'';\r\n        else id.style.display = ''block'';\r\n    }\r\n    if (id.style.display != "block") {\r\n        var items = id.getElementsByTagName("input"), len, i;\r\n        // Здесь, увы цикл по элементам формы:\r\n        for (i = 0, len = items.length; i < len; i += 1) {\r\n            // Если текущий элемент является чекбоксом...\r\n            if (items.item(i).type && items.item(i).type === "checkbox") \r\n                if (items.item(i).checked) { items.item(i).checked = false;    \r\n                                             items.item(i).onchange();}\r\n        }\r\n    }\r\n}\r\n\r\n<!--вызов функции на js:-->\r\n block_set_visible(cher_elms_id);', 28),
(87, 'Разбиение строки разделителем и формирование массива', '// pPhoneList  - строка вида: "str1,str2,str3,.."\r\n            List phone_col = new ArrayList();\r\n            phone_col.addAll(Arrays.asList(pPhoneList.split(",")));\r\n// phone_col - массив строк', 29),
(88, 'Цикл по группе чекбоксов и операции со свойствами', '<td id="id_chk_tlg_gr_notif">\r\n    <c:forEach var="group_tel" items="${list_telegram_gr_notif}">\r\n      <div class="checkbox">\r\n          <label style="margin-left:10px;">\r\n          <input type="checkbox" id="id_chk${group_tel[1]}_tlg_notif" value="${group_tel[1]}">\r\n              ${group_tel[0]}\r\n          </label>\r\n      </div>\r\n    </c:forEach> \r\n</td>\r\n\r\n \r\n       var id_chk_tlg_groups=document.getElementById("id_chk_tlg_gr_notif");\r\n        var items = id_chk_tlg_groups.getElementsByTagName("input"), len, i;\r\n        var str_grs="";\r\n        // Здесь, увы цикл по элементам формы:\r\n        for (i = 0, len = items.length; i < len; i += 1) {\r\n            // Если текущий элемент является чекбоксом...\r\n            if (items.item(i).type && items.item(i).type === "checkbox") \r\n                if (items.item(i).checked) str_grs+=items.item(i).value+'','';\r\n        }', 28),
(89, 'Остановки по э/э за 2016г с причинами', 'SELECT \r\na.uzel,\r\na.descript,\r\na.ip,\r\na.date_start_alarm,\r\na.duration,\r\n    --replace(replace(replace((a.com)::text, ''{\\"''::text, ''''::text), ''\\"}''::text, ''''::text), ''\\",\\"''::text, (chr(13) || chr(10)))\r\n\t\treplace(replace(replace(a.com::text,(chr(13) || chr(10)),'' ''),''{"'',''''),''"}'','''')\r\n    AS reason\r\nFROM ( SELECT a_1.uzel,\r\n        a_1.nom_oborud::text AS descript,\r\n        a_1.ipaddr as ip,\r\n        b.date_start_alarm as date_start_alarm,\r\n        date_trunc(''second''::text, (b.date_end_alarm)) AS date_end_alarm,\r\n        to_char((b.date_end_alarm - b.date_start_alarm), ''DD дн HH24 ч MI м''::text) AS duration,\r\n        array_agg(((((((b.fio)::text || ''/''::text) || to_char(b.date, ''DD-MM-YYYY HH24:MI''::text)) || chr(13)) || chr(10)) || b.comments) order by b.date) AS com\r\n       FROM (port_info.import_technograd a_1\r\n        LEFT JOIN port_info.comments_import_technograd_archive b ON ((b.tech_id = a_1.id)))\r\n      WHERE ( ((b.date_start_alarm) >= ''2016-01-01 00:00:00'' and (b.date_start_alarm) <= ''2016-12-31 23:59:59'') \r\nand (b.comments like ''%вари%'' or b.comments like ''%ткл%'' or b.comments like ''%нерг%'' or b.comments like ''%э/э%'' or b.comments like ''%Э/Э%'') )\r\nGROUP BY a_1.nom_oborud::text, b.date_start_alarm, b.date_end_alarm, to_char((b.date_end_alarm - b.date_start_alarm), ''DD дн HH24 ч MI м''::text), a_1.uzel,a_1.ipaddr ) a\r\nWHERE (a.date_start_alarm IS NOT NULL and a.uzel like ''%ЯКУТСК%'') \r\norder by ip,date_start_alarm\r\n\r\n\r\n', 27),
(90, 'Работа с датой - работает некорректно', 'import java.util.*;\r\nimport java.text.*;\r\n\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      Date dateNow = new Date();\r\n      SimpleDateFormat formatForDateNow = new SimpleDateFormat("E yyyy.MM.dd ''и время'' hh:mm:ss a zzz");\r\n\r\n      System.out.println("Текущая дата " + formatForDateNow.format(dateNow));\r\n   }\r\n}\r\n\r\n\r\n//Получим следующий результат:\r\n//Текущая дата Вс 2016.11.13 и время 12:12:36 AM FET\r\n                        \r\n                        // получение текущей даты с установкой hour,minute,second\r\n                        Date dd = new Date();\r\n                        Calendar today = Calendar.getInstance();\r\n                        today.clear(Calendar.HOUR);\r\n                        today.clear(Calendar.MINUTE);\r\n                        today.clear(Calendar.SECOND);\r\n                        dd = today.getTime();\r\n                        parsingDateS = dd;\r\n                        today.set(Calendar.HOUR, 23);\r\n                        today.set(Calendar.MINUTE, 59);\r\n                        today.set(Calendar.SECOND, 59);\r\n                        dd = today.getTime();\r\n                        parsingDateE = dd;\r\n                    ', 29),
(91, 'label установка Текста', '\r\n<label id="lbltipAddedComment">Текст</label>\r\n\r\n<!--<script>\r\ndocument.getElementById(''lbltipAddedComment'').innerText = ''your tip has been submitted!'';\r\n</script>-->\r\n', 28),
(92, 'Аналог GREP', 'findstr mysql .\\www\\sprav\\main.php\r\n\r\nmysql - строка поиска\r\n.\\www\\sprav\\main.php - имя файла, где поиск', 32);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;